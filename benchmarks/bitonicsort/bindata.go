// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// kernels.hsaco
package bitonicsort

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kernelsHsaco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6f\x6f\xdb\x44\x18\x7f\x7c\x71\x12\xcf\x5d\x01\x09\x09\x8d\x3f\x42\x9e\x34\xad\x68\x22\x56\x96\x75\x25\xf4\x05\x2c\x6b\x69\x37\x2d\x6d\xd3\x85\x75\x14\x34\xa1\x6b\x7c\x71\xad\x26\x76\x64\x3b\x55\x33\x89\xae\x29\xa2\xaf\xa6\x21\x10\x2f\x78\xb7\x2f\xc0\x77\x68\x24\xf6\x01\xd0\x24\xde\xf5\xc5\xde\xec\x23\xc0\x2b\x44\xd0\xd9\x77\x8e\x6d\xea\xae\x43\x85\x09\xf0\x4f\x72\x7f\xbe\xe7\xcf\x3d\xcf\x73\xe7\xba\x3d\xdf\xdd\xfb\xa8\x3a\x87\x04\xe1\x0a\x30\x64\xe0\x09\x08\xf4\xe6\x15\xbf\xcd\x15\xb5\xb3\x3e\x5f\xf0\x64\x65\x90\xe0\x0a\x9c\x06\x19\x72\x00\x20\x86\xec\xe2\x3c\x10\xa2\x2c\x31\xb9\xc0\xfc\x92\xf0\xe8\x54\x94\x79\x3e\xd4\x2f\x1b\x6a\xc7\xf9\x37\x21\xca\x61\x3f\x9a\x2b\x28\x4c\x1e\xe3\x0e\x44\x99\xfb\xa1\xe7\xf4\xe3\xf5\xdd\x7c\xea\x6a\xe2\x31\xfc\xc2\xf9\x51\x2c\x3f\x75\xb5\xdc\x11\xe3\x92\x04\x91\x5d\x5b\xc8\x6f\xc7\xb9\x9a\x8f\xf2\x51\x63\xcf\xf3\x79\x83\x56\x1e\x1b\x57\x21\x74\xf9\x79\xbe\x13\xc8\x7f\x9e\x7c\xef\x03\xc4\xc6\x4c\x88\x77\x78\xd5\x70\x2d\xd3\x68\xd4\x2d\xdb\xe5\xf1\x25\x66\x57\x59\x98\x0d\x7c\xa8\xfc\x4d\xef\x39\xf4\xe5\x22\xe4\x83\x31\xe5\xb2\xca\xc2\xec\x7c\xed\x96\x6f\x4b\x1f\xcb\x31\x26\xc7\x6d\x4d\x6f\x98\x05\xdc\xd6\xe8\xb5\xee\x60\x4a\xba\x71\xb7\xd1\x2a\xe8\xcd\xad\x72\xf1\x12\xeb\xff\x51\x0e\x40\x66\x3e\x85\x42\x41\x5e\x21\xb6\x63\x58\xe6\xb4\xc2\xf1\x99\x72\xf1\x5d\xa5\xa8\xdc\x91\x6f\x10\xdb\x24\x2d\x67\xa4\x91\x15\xa5\xa0\x2c\xe2\x36\x19\x89\x14\x45\x09\xd5\x26\xd3\x76\xbd\xd7\x5e\xb3\x5a\x21\xb3\x89\x90\xc5\x95\x0d\x6d\xc2\xb3\xaa\x62\x53\xef\x62\x7d\xd4\xd5\x52\x87\x98\x33\x55\x65\x26\xa2\x0d\x92\xf3\x92\x2a\x29\x77\x3c\x6d\xc5\xd6\x9d\x48\x0a\xb2\x4f\x87\x24\x87\x6d\x1b\xf7\x64\xde\xfa\xb8\xd7\x21\x11\x93\x89\xae\x61\xba\x17\x26\x02\x83\xba\x71\x37\xea\x5f\x0e\x54\x95\x96\xa1\x9b\xd3\x87\xaa\x56\x70\xab\x4b\x6e\x18\xa6\xc6\xd5\xf3\x2d\x6b\x0d\xb7\xae\x76\x9b\x4d\x62\x47\xad\x68\x06\xdc\xea\xd6\xa5\xd2\xa8\x77\x4d\xb3\xeb\x1d\xdc\x20\xcb\x5d\xdc\x9a\x0e\xba\x18\xe9\x1b\x0d\xae\xf1\x31\x4b\x9a\xb8\xdb\x72\x93\x2b\x77\x5c\xac\x93\xe4\xca\x69\xe1\xc9\x65\x4f\x26\x97\x3d\x99\x5c\xf6\xd5\x9e\x27\x3a\x66\xc5\xcf\x5d\x51\x07\x3b\xce\x52\xb3\xfe\x9f\xab\x4b\x33\x6c\xd2\x70\x0d\xcb\xfc\x37\x57\x75\x42\xbf\x39\xd7\x0c\x4d\x23\xa6\xff\xf0\x2f\x35\x9b\x0e\x71\x3f\x49\x4e\xf0\xfa\xd4\xe4\xdf\x1f\x7f\xf5\x05\xc7\xff\xf4\xd9\xf1\x67\x2c\x8d\xd4\x6c\xab\x13\xbc\x14\x99\x0b\x7d\x81\x63\x5b\xaf\x13\xbd\x4d\x4c\xd7\xcf\xf0\xf2\x14\x53\xce\xdb\x56\xb7\xc3\x54\x73\xc6\x16\xd1\x7c\x7d\x91\xa9\x6b\xb6\xb1\x89\x5d\x92\x6c\x10\xed\x9c\xd5\xc8\x2b\xbb\x8d\x37\x49\xd3\xb6\x78\x50\x45\x09\x46\x6a\xb1\xdb\xae\xcf\xd7\x6e\x8e\xde\xdf\x17\x2f\x8e\x34\x2b\x11\x0d\xef\x6c\x01\x6f\xcd\xb5\xb0\x7b\xdb\xb2\x37\xfc\xa4\xbd\x3e\x4b\x97\xa7\x64\x55\x55\xe5\xbf\xf0\xef\x42\x8a\x14\x29\x52\xa4\xf8\x9f\x63\xb4\x9e\x93\xfc\x15\xd6\x9f\x16\x6e\x51\x54\xe0\x07\xf8\xc9\x5b\x73\x45\xff\xec\x94\x43\xf7\x63\xc1\x8a\xcd\x87\x28\x8a\xb9\xe1\x70\x38\x3c\xc9\xbc\x4f\x0a\xbb\x80\x06\xa2\x57\x79\x6e\x40\xdb\x3f\x02\x1a\x78\x23\x21\xa0\xc1\x69\x00\x98\x11\xd0\x80\x2e\x81\xbf\x14\xd0\xe0\x0c\x00\xdc\x83\xfb\xfb\x68\x88\xf6\x68\x35\x12\x92\xbe\xcd\x88\xbb\x7d\x09\xa0\x84\x1e\xa2\xbd\x1c\x48\xa5\x3e\x12\x1f\x20\x89\xae\xf2\xbf\x7a\x2c\x02\x02\xb4\x83\xbe\x41\x92\x78\x7e\x07\xa1\xed\x3e\xc0\x39\x24\x40\x49\x04\xb1\x24\x64\x72\xdb\x00\x5f\x3f\xde\x05\x04\x02\x92\xb7\x01\xa0\x94\xcd\xa0\x32\xa2\x32\x11\xd1\x41\x2b\x65\x1e\xc2\x5e\x1f\xe0\x01\x48\xd2\xf9\x6c\x3e\x57\xee\x67\x77\xfa\x80\xe4\xed\x2c\x3a\xbd\xbd\x23\x7d\xf7\x45\x76\x9c\x66\x5a\x3b\xf0\x3f\x89\xd4\x0e\x10\x40\x8e\xca\x3b\x70\x7f\x3f\x3b\xfe\xd2\xdb\xd9\x71\xf9\xad\xec\xcb\x12\xe4\xc7\xe8\x5c\x75\x0e\xfc\x45\x7f\xe7\x00\x79\x1f\x50\xfa\xfb\x2f\x7a\xec\x53\xa4\x48\x91\x22\x45\x8a\x14\x29\x52\xa4\x48\x91\x22\xc5\x3f\x87\x60\xaf\x99\xed\x13\x8f\xb1\xe6\x19\xc6\x59\xc6\xeb\x4c\xcf\x57\xfd\xe3\x8c\x7f\xf9\x7d\x68\x51\x2e\x32\x3d\xdf\x57\xae\xa1\xc3\xe3\x55\x0d\x73\x83\xd8\xd3\x4a\xb5\x3a\xab\x4c\xaa\x45\x68\xb4\xb0\xa9\x2b\x9b\xfe\x26\x27\x95\x28\x47\xe7\xeb\xc5\x45\xf9\xd1\x7e\x3a\x43\xd2\x7e\x35\xa8\x5a\xcf\x74\x7a\x6d\x50\x75\xb3\xab\xae\x63\x67\x1d\xd8\x4f\x2a\x77\x6d\x50\x4d\xcb\x25\xa0\xba\x64\xcb\xf5\x64\xb8\x6d\x34\x40\x6d\x58\xed\x36\x31\x5d\x50\x9d\x5e\xdb\xc5\x6b\xa0\x3a\xeb\x8e\x6b\xfb\x77\x3e\x47\x36\xb4\x3f\x9f\x5d\x5d\xac\x2c\x5c\x9f\x39\x3a\xf7\xe3\x40\x60\x73\x10\x0c\x1f\x8a\x72\x91\x35\x45\x66\xcb\xbf\xb4\xf0\xf9\x3a\x05\x00\xbf\x0e\x87\x16\x77\xe3\xf3\xc2\x59\x09\xc5\x81\x90\x3f\xc7\xab\x6c\xce\xb9\x3f\x9f\x47\xce\x67\x62\xfe\x62\x8c\x5f\x67\xfb\xf4\xdc\x9f\x3f\x37\x9c\xc7\x0f\xa9\x37\x8c\xb3\x00\x90\x0f\xf9\x27\x9d\x63\x80\x58\x5c\x8e\x89\xc8\xd9\x84\xe4\xf3\x21\x49\x09\x14\x98\x6f\x86\x0b\x12\xce\x6d\xf0\xb8\x52\x2c\xcc\x14\xeb\xb2\x18\x0b\xd3\x61\xfe\xe7\x12\xc2\x73\xfe\x30\x3c\xf7\x21\x7c\xcf\xfc\xaf\xb1\x36\x7f\x46\xe2\xf3\x3f\x1f\xce\x3d\x84\x27\xcc\x7f\x35\x21\x3e\xc7\x72\x82\xff\xfb\xec\xfc\xcf\x6b\xcf\xf0\xff\x23\x00\x00\xff\xff\x86\x57\x5f\xa0\x50\x24\x00\x00")

func kernelsHsacoBytes() ([]byte, error) {
	return bindataRead(
		_kernelsHsaco,
		"kernels.hsaco",
	)
}

func kernelsHsaco() (*asset, error) {
	bytes, err := kernelsHsacoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kernels.hsaco", size: 9296, mode: os.FileMode(509), modTime: time.Unix(1536376204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kernels.hsaco": kernelsHsaco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kernels.hsaco": &bintree{kernelsHsaco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
