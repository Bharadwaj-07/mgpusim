// Code generated by MockGen. DO NOT EDIT.
// Source: memoryallocator.go

package driver

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMemoryAllocator is a mock of memoryAllocator interface
type MockMemoryAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryAllocatorMockRecorder
}

// MockMemoryAllocatorMockRecorder is the mock recorder for MockMemoryAllocator
type MockMemoryAllocatorMockRecorder struct {
	mock *MockMemoryAllocator
}

// NewMockMemoryAllocator creates a new mock instance
func NewMockMemoryAllocator(ctrl *gomock.Controller) *MockMemoryAllocator {
	mock := &MockMemoryAllocator{ctrl: ctrl}
	mock.recorder = &MockMemoryAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemoryAllocator) EXPECT() *MockMemoryAllocatorMockRecorder {
	return m.recorder
}

// RegisterStorage mocks base method
func (m *MockMemoryAllocator) RegisterStorage(byteSize uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterStorage", byteSize)
}

// RegisterStorage indicates an expected call of RegisterStorage
func (mr *MockMemoryAllocatorMockRecorder) RegisterStorage(byteSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStorage", reflect.TypeOf((*MockMemoryAllocator)(nil).RegisterStorage), byteSize)
}

// GetDeviceIDByPAddr mocks base method
func (m *MockMemoryAllocator) GetDeviceIDByPAddr(pAddr uint64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceIDByPAddr", pAddr)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDeviceIDByPAddr indicates an expected call of GetDeviceIDByPAddr
func (mr *MockMemoryAllocatorMockRecorder) GetDeviceIDByPAddr(pAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceIDByPAddr", reflect.TypeOf((*MockMemoryAllocator)(nil).GetDeviceIDByPAddr), pAddr)
}

// Allocate mocks base method
func (m *MockMemoryAllocator) Allocate(ctx *Context, byteSize uint64) GPUPtr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", ctx, byteSize)
	ret0, _ := ret[0].(GPUPtr)
	return ret0
}

// Allocate indicates an expected call of Allocate
func (mr *MockMemoryAllocatorMockRecorder) Allocate(ctx, byteSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockMemoryAllocator)(nil).Allocate), ctx, byteSize)
}

// AllocateWithAlignment mocks base method
func (m *MockMemoryAllocator) AllocateWithAlignment(ctx *Context, byteSize, alignment uint64) GPUPtr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateWithAlignment", ctx, byteSize, alignment)
	ret0, _ := ret[0].(GPUPtr)
	return ret0
}

// AllocateWithAlignment indicates an expected call of AllocateWithAlignment
func (mr *MockMemoryAllocatorMockRecorder) AllocateWithAlignment(ctx, byteSize, alignment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateWithAlignment", reflect.TypeOf((*MockMemoryAllocator)(nil).AllocateWithAlignment), ctx, byteSize, alignment)
}

// Free mocks base method
func (m *MockMemoryAllocator) Free(ctx *Context, ptr GPUPtr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", ctx, ptr)
}

// Free indicates an expected call of Free
func (mr *MockMemoryAllocatorMockRecorder) Free(ctx, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockMemoryAllocator)(nil).Free), ctx, ptr)
}

// Remap mocks base method
func (m *MockMemoryAllocator) Remap(ctx *Context, pageVAddr, byteSize uint64, deviceID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remap", ctx, pageVAddr, byteSize, deviceID)
}

// Remap indicates an expected call of Remap
func (mr *MockMemoryAllocatorMockRecorder) Remap(ctx, pageVAddr, byteSize, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remap", reflect.TypeOf((*MockMemoryAllocator)(nil).Remap), ctx, pageVAddr, byteSize, deviceID)
}
