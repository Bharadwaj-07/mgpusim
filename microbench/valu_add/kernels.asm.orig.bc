; ModuleID = 'kernels.cl'
source_filename = "kernels.cl"
target datalayout = "e-p:64:64-p1:64:64-p2:64:64-p3:32:32-p4:32:32-p5:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-A5"
target triple = "amdgcn-amd-amdhsa-amdgizcl"

; Function Attrs: convergent nounwind
define amdgpu_kernel void @microbench(float addrspace(1)* nocapture readonly, float addrspace(1)* nocapture readonly, float addrspace(1)* nocapture) local_unnamed_addr #0 !kernel_arg_addr_space !3 !kernel_arg_access_qual !4 !kernel_arg_type !5 !kernel_arg_base_type !5 !kernel_arg_type_qual !6 !kernel_arg_name !7 {
  %4 = tail call i64 @_Z13get_global_idj(i32 0) #2
  %5 = and i64 %4, 4294967295
  %6 = getelementptr inbounds float, float addrspace(1)* %0, i64 %5
  %7 = getelementptr inbounds float, float addrspace(1)* %1, i64 %5
  %8 = getelementptr inbounds float, float addrspace(1)* %2, i64 %5
  br label %10

; <label>:9:                                      ; preds = %10
  ret void

; <label>:10:                                     ; preds = %10, %3
  %11 = phi i32 [ 0, %3 ], [ %87, %10 ]
  %12 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %13 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %14 = fadd float %12, %13
  store float %14, float addrspace(1)* %8, align 4, !tbaa !8
  %15 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %16 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %17 = fadd float %15, %16
  store float %17, float addrspace(1)* %8, align 4, !tbaa !8
  %18 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %19 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %20 = fadd float %18, %19
  store float %20, float addrspace(1)* %8, align 4, !tbaa !8
  %21 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %22 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %23 = fadd float %21, %22
  store float %23, float addrspace(1)* %8, align 4, !tbaa !8
  %24 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %25 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %26 = fadd float %24, %25
  store float %26, float addrspace(1)* %8, align 4, !tbaa !8
  %27 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %28 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %29 = fadd float %27, %28
  store float %29, float addrspace(1)* %8, align 4, !tbaa !8
  %30 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %31 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %32 = fadd float %30, %31
  store float %32, float addrspace(1)* %8, align 4, !tbaa !8
  %33 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %34 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %35 = fadd float %33, %34
  store float %35, float addrspace(1)* %8, align 4, !tbaa !8
  %36 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %37 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %38 = fadd float %36, %37
  store float %38, float addrspace(1)* %8, align 4, !tbaa !8
  %39 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %40 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %41 = fadd float %39, %40
  store float %41, float addrspace(1)* %8, align 4, !tbaa !8
  %42 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %43 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %44 = fadd float %42, %43
  store float %44, float addrspace(1)* %8, align 4, !tbaa !8
  %45 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %46 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %47 = fadd float %45, %46
  store float %47, float addrspace(1)* %8, align 4, !tbaa !8
  %48 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %49 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %50 = fadd float %48, %49
  store float %50, float addrspace(1)* %8, align 4, !tbaa !8
  %51 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %52 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %53 = fadd float %51, %52
  store float %53, float addrspace(1)* %8, align 4, !tbaa !8
  %54 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %55 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %56 = fadd float %54, %55
  store float %56, float addrspace(1)* %8, align 4, !tbaa !8
  %57 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %58 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %59 = fadd float %57, %58
  store float %59, float addrspace(1)* %8, align 4, !tbaa !8
  %60 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %61 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %62 = fadd float %60, %61
  store float %62, float addrspace(1)* %8, align 4, !tbaa !8
  %63 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %64 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %65 = fadd float %63, %64
  store float %65, float addrspace(1)* %8, align 4, !tbaa !8
  %66 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %67 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %68 = fadd float %66, %67
  store float %68, float addrspace(1)* %8, align 4, !tbaa !8
  %69 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %70 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %71 = fadd float %69, %70
  store float %71, float addrspace(1)* %8, align 4, !tbaa !8
  %72 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %73 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %74 = fadd float %72, %73
  store float %74, float addrspace(1)* %8, align 4, !tbaa !8
  %75 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %76 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %77 = fadd float %75, %76
  store float %77, float addrspace(1)* %8, align 4, !tbaa !8
  %78 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %79 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %80 = fadd float %78, %79
  store float %80, float addrspace(1)* %8, align 4, !tbaa !8
  %81 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %82 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %83 = fadd float %81, %82
  store float %83, float addrspace(1)* %8, align 4, !tbaa !8
  %84 = load float, float addrspace(1)* %6, align 4, !tbaa !8
  %85 = load float, float addrspace(1)* %7, align 4, !tbaa !8
  %86 = fadd float %84, %85
  store float %86, float addrspace(1)* %8, align 4, !tbaa !8
  %87 = add nuw nsw i32 %11, 25
  %88 = icmp eq i32 %87, 1000
  br i1 %88, label %9, label %10
}

; Function Attrs: convergent nounwind readnone
declare i64 @_Z13get_global_idj(i32) local_unnamed_addr #1

attributes #0 = { convergent nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+dpp,+fp64-fp16-denormals,+s-memrealtime,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+dpp,+fp64-fp16-denormals,+s-memrealtime,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { convergent nounwind readnone }

!llvm.module.flags = !{!0}
!opencl.ocl.version = !{!1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, i32 2}
!2 = !{!"clang version 4.0 "}
!3 = !{i32 1, i32 1, i32 1}
!4 = !{!"none", !"none", !"none"}
!5 = !{!"float*", !"float*", !"float*"}
!6 = !{!"", !"", !""}
!7 = !{!"v1", !"v2", !"output"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
