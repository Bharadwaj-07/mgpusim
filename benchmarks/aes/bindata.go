// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// kernels.hsaco
package aes

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kernelsHsaco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x4f\x23\x57\xb6\x3f\xbe\xae\xba\x94\x8b\xc2\x36\x45\x51\x2e\x8c\xdb\x29\x50\xa5\xa8\x9c\x36\x16\x5d\xa1\x79\x0e\x6a\xe5\x41\x37\xdd\xe4\x83\xee\x74\xd2\x2f\xc9\xcb\x7b\x13\x45\x0e\x36\x34\x6a\x30\x8c\x31\x51\x13\x0d\x95\xa2\x33\x13\xb1\x40\xa2\x35\x62\xd1\x12\x8b\xf9\x07\x66\x91\xd9\x8f\x02\xeb\x99\xc5\x64\x37\x1b\x16\xd9\x64\x3f\x9b\x19\xa9\x36\x61\x74\xeb\x03\x6c\x77\xdc\x49\x46\x89\x32\xd2\xf8\x48\xf0\xab\x7b\x7e\xe7\xeb\x5e\xdf\xf2\x75\xdd\x5b\x9f\xdc\x5c\xb8\x45\x62\xb1\x19\x08\x25\x0e\x5f\x41\x8c\x5d\xa4\x83\x76\x44\xec\x8d\x04\x48\x7c\x5d\x09\x04\x98\x01\x09\x44\xa0\x00\xc0\x35\xd9\xb5\xe3\x49\xac\x15\x85\x50\x1f\x0b\xfd\x3a\xc9\x95\x44\x2b\x46\xf5\x30\x3f\xbe\xa9\xdd\x8e\x73\x42\x2b\x36\xfb\xb1\x5a\x41\x0f\xf5\x6d\xb8\x01\xad\x18\xf9\x91\x1f\xe8\x17\xa5\x7d\xeb\xeb\x46\x85\xfb\x1e\x7e\xcd\xf5\x31\x79\xf3\xeb\x46\x85\x3e\x63\x5c\x3a\x09\x17\x8d\x27\x81\x8b\xc2\x9b\xf0\x8f\xb4\x15\xb9\x26\x3f\x21\xcc\x3f\x7b\x7b\xce\x37\x8f\x3e\x9b\x61\x7f\x3e\x04\x7a\x0e\x7a\xce\xfb\x16\xe9\x66\x6f\xcf\xcd\xdf\x7d\x3b\xb0\x65\xd3\xa3\x37\xd4\x97\xd7\x2a\xcb\x8b\xb5\xf1\xf2\x5a\x85\xfd\xdd\xdf\x2c\x33\x58\x5e\xf9\x78\x71\x75\x7c\x79\xe9\x61\x69\xe2\xc5\x30\xfe\x24\x05\x10\x43\x9f\xf1\xf1\x71\xf1\x9d\x6a\x7d\x73\x65\xbd\x36\xad\x47\xf2\xff\xfa\x95\x82\x3e\xa1\xbf\x2f\xbe\x5e\xad\xd7\xaa\xab\x9b\x17\x8c\xa8\xeb\xe3\xfa\x9d\xf2\x5a\xf5\x42\xa5\xeb\xfa\xcd\xda\x62\x7d\x7b\xa3\x21\xb2\xeb\x7b\xdb\x6b\x1f\xae\xaf\x36\x99\x8c\x85\xec\xcc\x83\xca\x98\x6f\xb1\x50\xae\x2d\x6f\x95\x97\x2f\x42\xbc\xb1\x51\xad\xdd\x58\xd0\x6f\xb4\xb0\xe7\x45\xf9\xc5\xd8\xfa\xfb\x3e\x3b\x5b\x5f\xde\x6c\x49\x2d\x06\xf0\x2d\x45\xad\xd4\x36\xb6\x1a\x62\xd4\xfa\x9f\xed\x8d\x6a\x8b\xc9\xd8\xd6\xe2\xfd\x72\x1d\xc7\xce\x2d\xee\xad\x7c\xdc\x1a\xa0\x74\x4e\xcd\xae\xae\x2c\xd7\xa6\xbf\x95\x7a\xa7\xbc\xba\x55\x7d\x7d\xa5\x56\x89\xe8\xf9\xd5\xf5\x0f\xcb\xab\xd7\xb7\x96\x96\xaa\xf5\x56\x2b\x56\x42\x64\xf5\x76\x53\xf0\x4a\xa5\x7e\x6f\xa3\xbc\x58\x7d\x73\xab\xbc\x3a\x7d\x1e\xe1\x82\x5f\x5c\x8c\x98\x40\xe6\xaa\x4b\xe5\xad\xd5\x46\xe7\x9e\x57\x1f\x6e\x94\x6b\x95\x6a\xe5\x83\x07\xd5\xed\x67\x0d\xc0\x4a\xad\xf1\xb3\xf5\xff\x45\xfb\x27\x1c\x80\xcd\xff\x84\x8f\xfd\x47\x2a\xfc\x95\x95\x4a\xa5\x5a\x0b\x92\xbf\xb1\xb4\xb4\x59\x6d\xfc\x6f\xe7\xfa\x5f\x9d\x9a\xfc\xe9\xf3\xbf\xf7\x33\xe7\xff\xbf\xef\xce\x7f\x63\xbd\x52\xbd\x5b\x5f\xdf\x38\xff\x2e\x0a\x5d\xd8\xf7\x65\xb9\xbe\x7c\xaf\xba\xbc\x56\xad\x35\x82\x0a\xaf\x4e\x85\xe4\x7c\x7d\x7d\x6b\x23\xa4\x6e\xad\x3c\xac\x56\x02\x7e\x22\xa4\xef\xd6\x57\x3e\x2a\x37\xaa\x9d\x0d\x5a\x83\x87\x7d\x8c\x7a\xf6\x6e\xf9\xa3\xea\x52\x7d\x3d\x4a\xaa\xeb\xe7\x23\x75\x67\x6b\xed\xde\xfc\xdd\xb7\x2e\xbe\x36\xed\xff\xba\x60\xde\x69\x61\x26\xaf\x84\xcc\xed\xf2\xc3\x5b\xab\xe5\xc6\xbb\xeb\xf5\x07\x41\xd5\x7e\x50\xfb\xea\x94\x58\x2c\x16\xc5\x67\xad\x87\x6c\x0d\xcb\xb2\x95\xbb\xed\x77\x41\xac\xe9\x8f\x2d\x85\x3a\x77\xa1\x7f\x7d\x37\xf1\x67\x12\x2e\x99\xb1\xf6\x80\xe1\xea\xf1\x2f\x2c\xcd\x5d\xe9\x4a\x57\xba\xd2\x95\xae\xfc\xdb\xc9\xc5\x7a\x28\x04\x4f\x76\x4f\x2d\x7c\xad\xf2\x27\xf8\x3d\x7c\xe9\x3f\xeb\xb5\x2e\xbf\xa5\xa6\xeb\x61\x78\xa1\x85\xe3\x38\x8e\x9e\x9d\x9d\x9d\xfd\x98\x75\xff\x58\x72\x9d\x90\x13\xf6\x13\x20\x1e\xa3\x27\xe0\x8f\x00\x3d\x61\x23\xf1\x29\xd0\x13\xf6\xd3\xe1\xd3\x18\x39\xd1\x00\xe0\x0c\xf6\xbf\x60\x3d\xf8\x04\xf6\x8f\x13\x52\xcf\x67\x42\x8f\xf0\x5b\x01\xc0\xa6\x00\xf6\xaf\x01\x0c\x9e\x10\xe7\x77\xc0\x8d\x72\x00\x76\x8c\x27\x25\x80\x5f\x9c\xfa\x5b\x15\x44\xf4\xe3\x9e\x01\xf7\xb9\x1b\xfb\xec\x0b\x17\xf8\xcf\x59\x0c\xe1\x49\xdf\x81\xf0\x38\x79\x20\xec\xa5\x0e\x12\x4f\xd2\x07\x89\xc7\xfd\x07\x89\x3d\xf9\x40\x7c\x32\x70\x20\x3e\x56\x0e\xc4\xbd\xc1\x83\xde\x27\xea\x41\xef\xe3\xcc\x41\xef\x9e\x76\x30\x40\x0c\x47\x20\x9c\xd3\x47\xa8\x93\x24\x82\x93\x26\x9a\xd3\x4f\xb2\x4e\x82\xc8\x8e\x48\x54\xa7\x97\xe4\x9d\x14\x51\x1c\x99\x8c\x3a\x0a\x29\x38\x83\xa4\xe8\xa8\x64\xc2\xc9\x10\xdb\xd1\xc8\xa4\xb3\x91\xda\x3f\xf6\x44\xc4\x38\xa5\xe0\x89\x16\x72\x94\xc6\x3c\x51\x40\x91\x52\xe2\x89\x39\x24\x94\xc6\x3d\xc9\x44\x89\xf1\x92\x8e\x7d\x8c\x97\xb2\x98\xf0\xf5\x14\xfb\x99\x5d\xd2\x40\x99\xf1\x49\x09\x55\xc6\x27\x15\xcc\xf8\x7a\x11\x7b\x99\x5d\x5a\x43\x8d\xf1\xe9\x24\x0e\x31\x3e\x2d\x63\x96\xf1\xe9\x34\xa6\x28\x8d\x4b\x84\x73\xfe\x0a\x8f\x8e\xb7\xf8\xfd\x63\xcf\x48\x9a\x84\x52\xe0\x93\x96\xb9\x9b\x4c\x1a\x47\x49\x44\xd7\x3a\xdc\xa9\x93\xfd\x63\x2f\x5f\xf0\xb9\xc1\x54\x12\xf8\x82\x65\xee\x16\xd0\x38\xc2\x82\xcf\xab\x97\x2d\xf0\x74\x0c\x7c\xb1\x60\xee\x22\x1a\x6e\xe1\x70\xe7\x08\x8b\xe8\x29\x81\x5f\xe6\x32\x02\x5f\x28\x9a\xbb\x85\x82\x71\x54\x98\x40\xb7\x78\xb8\x23\x5f\x9e\x42\x6d\x7c\x12\xc4\x11\xc4\xc1\x17\x0a\x38\xfc\x82\x85\xa9\x54\x12\xe5\xab\x06\x2a\x97\x2d\x54\x53\x88\x72\x2a\x89\x3d\x23\x49\xf4\x4c\x3d\x88\xaf\x1b\xe6\xae\xae\x1b\xae\x71\xb8\x73\xa4\x17\xf0\x97\xb1\xfd\x63\x4f\x32\x7c\x4e\x1d\xd1\x81\x37\x0a\xe6\xae\x61\x04\xf9\x8d\x22\x7a\xb9\x30\xff\xf3\xc6\x53\xf9\xb5\xf1\x12\x78\x6a\xc0\x47\x1c\xd3\x33\x9e\x8e\x14\x51\x1b\x2f\x40\x32\x33\x81\x99\xe7\x8b\xa8\x3d\x6f\xa0\x3c\x66\xe0\xc0\xb8\x89\x74\xec\x1a\xe6\x47\x24\xa4\x97\x5e\x46\x4f\x93\x02\x7f\x29\x67\xee\x4a\x92\xe1\xe6\x0e\x77\x8e\x24\x1d\x37\x60\xff\xd8\x1b\xcd\xf9\x5c\xba\x4f\x02\x3e\xa7\x9b\xbb\xb9\x9c\xe1\xea\x87\x3b\x47\x39\x13\xbd\x6c\xd0\x9f\x81\x4b\x39\xe0\x75\x33\xe8\x93\x19\xf4\xc9\x13\xcc\x8b\xfe\x98\x05\x73\xd7\x34\x8d\xcc\x95\x69\x3c\x32\x8b\xc8\xfa\x95\x19\x9b\x81\xfe\x3e\x09\xb9\x61\x56\x4b\x01\xe9\xb0\x84\x74\x48\x42\x69\x64\x0e\xbd\xb4\x16\xd4\xa3\x65\xcd\x5d\x4d\x33\xdc\xec\xe1\xce\x91\xa6\xa3\x27\x67\x83\x5a\x86\x34\xe0\xb3\xba\xb9\x9b\xcd\x1a\xea\xa5\xeb\x38\x70\x29\x87\x7e\x4d\x59\x13\x3d\x31\xac\x69\x38\xfb\x74\x4d\xf4\xe9\x9a\x80\x0a\xae\x30\xf2\xca\x79\x5d\xc2\x40\x1a\x63\x3d\x89\x47\xfc\x70\x16\x85\x5e\x11\x33\x63\xb7\x40\x78\x2c\xb8\xfc\xbc\x88\x09\x37\xf1\x88\xce\x2e\x60\x5f\x8f\x84\xfc\xd0\x1d\x4c\x0c\x89\xc8\xf7\x69\x68\xf4\xdd\x45\x81\x88\x4e\x82\x48\x0e\xbb\x3f\x79\x00\x75\xf8\xb9\x3c\xa6\x06\x15\xec\x9f\xcd\x63\x2a\x21\x20\x77\x33\x8f\xc6\x80\x80\xf2\x4b\x69\x4c\xde\x7c\x0d\xf3\x19\x15\xb9\x1e\x8a\xf4\x31\x75\xc5\xab\x0a\xf6\xbe\xa4\x62\x7c\x5e\xc6\x1e\xb7\xe7\x91\x3f\xee\xc9\x1c\xbb\x17\xc0\x4b\xeb\x98\xa1\x3c\x78\x88\xa8\xd2\x38\x78\x96\x85\x2a\xe5\x61\xaf\x50\xd0\xbd\x69\x13\x33\x4c\xf7\x72\x96\xdd\x2f\xb0\x57\x2c\xea\xde\x75\x03\x35\xa6\x7b\x4d\x42\x8d\xf9\x2d\x88\xc1\xbd\xa3\x69\x38\xc4\xf4\x77\xd9\x3d\xc4\x83\x77\x27\xcd\xee\x25\xd8\xb3\x6d\x7d\x6f\x62\x42\xf7\x14\x21\xc8\xa7\x52\x3f\x96\x97\x57\x02\x3f\x59\xf6\xed\x38\x54\x4d\xa2\xa2\x1d\x27\x79\xc7\xcd\x17\x4a\x9c\xc5\xda\x45\xdb\xcd\x4f\x94\x38\x41\x30\x89\x60\xdb\x71\xa2\x3a\xae\x3a\x59\xe2\x4c\xd6\x36\x6d\x57\xb5\x4a\x1c\xa5\x26\xa1\x53\x76\x9c\x08\x8e\x2b\x94\x4a\x5c\x96\xb5\xa7\x6d\x57\xb8\x56\xe2\x44\x76\x4d\x6d\x57\x10\x4a\x5c\x4e\x35\x01\x66\x4e\xe3\xfe\x62\x31\x73\x3a\xec\x6f\xc7\xce\x9c\x0e\x00\x0c\x30\xbc\xe4\x6f\xed\xcd\x9c\x0e\x01\xf4\x11\x95\xe5\xca\x39\x6e\x6e\xb2\xc4\xe9\xac\x8e\x29\xdb\xcd\x95\x4a\x9c\xc1\xae\x47\x6d\x37\x67\x94\x38\x45\x31\x89\x92\xf7\x6b\xe2\x34\xc5\x74\x55\xbd\x44\x14\xc5\x76\x55\xb5\xc4\xc9\xb2\x49\xe4\x69\x3b\x4e\x34\xc7\xd5\xae\x95\xb8\x74\xda\x24\xe9\x97\xed\x38\x91\x1d\x57\x9e\x29\x71\x92\x64\x86\x39\x93\x0c\x45\x7f\x2b\x73\xe6\xf4\x39\x7f\x5b\x71\xe6\x34\xe5\x3f\xfd\xcd\x9c\xf6\x03\x48\x44\x9a\xb6\x5d\xf9\x5a\x89\x4b\x26\xcd\x38\x19\x75\x48\xd2\xb2\x19\x37\x08\x20\x87\xf5\xf6\x32\xcc\x00\x24\xc2\x7e\xa5\xc2\xd8\xd4\x1d\xc5\x12\xbb\x56\x00\xfa\xbf\x84\xcf\xfe\xf0\x97\x6f\x7e\x73\x0c\x67\xe0\x7e\xc5\xd6\x4d\x37\xf6\x28\x46\xd0\x01\x62\xf9\x73\x4a\x01\x50\xfc\x79\x61\x70\xa8\xd0\x38\xf5\xf2\x49\x54\x62\x3c\xf5\xcc\x3c\x0e\xb2\xb6\x24\xe1\x20\x6b\x2b\x0a\x2a\x31\x4a\xf7\x2c\x43\xdf\x2b\x58\xba\xa7\xaa\x38\xc8\xda\x68\xea\x7b\x45\xd4\xd9\x77\x66\x86\xd9\xcb\x32\x66\x98\x7d\x92\xb3\x08\x05\xea\xc9\x49\x4b\xa0\x40\xe5\x91\x34\x0e\x5c\x92\x91\xcd\x17\x95\xd9\x8d\x8e\xa2\xca\xec\x04\x01\xd5\x18\xa5\xca\x70\x16\x3d\x4a\x31\x13\xa3\x74\xb0\x57\x64\xd7\x16\xcf\x03\xf5\x94\xb4\x25\x30\x94\x24\x2b\xc5\xe2\x8d\x6a\x96\xc4\x50\x10\xac\x3e\xa6\x57\x65\x2b\xc1\x90\x8a\x56\x0f\xe5\x7c\xbd\xc4\x50\xa6\x16\x65\x98\x66\x75\x70\x14\xe0\x57\xa7\xc1\xde\xf2\xee\xf1\xcf\xbd\x86\x77\xa5\x2b\x5d\xe9\x4a\x57\xba\xd2\x95\x1f\x26\xd1\x59\xf3\x49\xb8\x3f\xde\x1b\xb6\xb5\x10\xf9\x10\xad\xf0\x1c\x3e\x7a\xea\x8f\x8e\xe5\xff\xfe\xcd\xd9\x3a\xc3\xbf\x85\xfe\xd1\xb9\x72\x3a\xf1\xed\xf9\x16\x56\x6a\x0f\xaa\xf5\x69\x7d\x61\x61\x4e\x9f\x2c\x4e\xc0\xe2\x6a\xb9\xb6\xac\x7f\x14\x1c\xb2\x32\x8d\xfe\xec\x7a\x63\x61\xd5\x0d\xb9\x55\xdf\x13\xea\xbf\x1c\x6c\xd5\xfb\x4d\xd2\x73\x71\xfe\x1e\x4a\x5f\x87\xf3\x01\x28\xd6\xd6\x1b\x55\x28\x56\xb6\x6b\x9b\xdb\x6b\x50\x5c\xae\x6d\x15\xef\x97\x37\xef\x43\xf8\x9f\xe9\x1b\x75\x28\x36\xaa\x0f\x1b\x7e\xab\xbc\xb6\xb2\x08\xc5\xc5\xf5\xb5\xb5\x6a\xad\x01\xc5\xcd\xed\xb5\x46\xf9\x43\x28\x6e\xde\xdf\x6c\xd4\x83\xab\x00\xe1\xfa\xf5\x89\x0f\xae\xf8\xff\xed\xf3\xc3\x84\x0f\xe6\xde\xbb\x33\x7b\xfb\xd5\x1b\xcf\xee\xf3\xf7\x91\x58\x38\x06\xd1\xb1\x7f\xa7\xf3\xff\x48\xda\xdf\xbd\xe8\x09\x3f\xfb\xc8\x2d\x9a\x0f\x11\x4e\x84\x7a\x3e\xcc\x15\x0d\x57\x34\x4f\x52\x00\xf0\x8f\xb3\xb3\xf5\xc8\x3f\x9a\x0f\x11\xea\x6d\x65\x09\x6d\xf9\x87\xc2\xd8\x11\x1f\xcd\x9f\x08\xb5\x36\x7f\xae\x0d\x9f\x0b\xdf\x4b\x88\xf8\x68\xbe\x46\xd8\x3e\x1d\xdb\xb7\xb9\xc6\x9a\xdf\x11\x81\xce\xef\x95\x74\x0a\x30\x1e\xfa\xc6\x23\x45\x87\xf7\x3d\xf8\xb6\xfe\x47\x69\xa6\xc2\x90\x13\x6d\x69\x36\x42\x7f\xa3\x43\xfa\x08\xff\xbb\xf9\xb3\x6f\x92\x27\xa1\xff\xc3\xb0\xdd\xdb\xf4\xce\x07\x34\x8d\xeb\x7c\x73\xed\x4d\x92\x0e\xdf\xfb\x79\xaf\x43\xfe\x48\xde\xec\xe0\xbf\x12\xfa\xe7\xbf\xc3\xff\x9f\x01\x00\x00\xff\xff\x0b\x59\x83\xe3\x88\x24\x00\x00")

func kernelsHsacoBytes() ([]byte, error) {
	return bindataRead(
		_kernelsHsaco,
		"kernels.hsaco",
	)
}

func kernelsHsaco() (*asset, error) {
	bytes, err := kernelsHsacoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kernels.hsaco", size: 9352, mode: os.FileMode(509), modTime: time.Unix(1536376204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kernels.hsaco": kernelsHsaco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kernels.hsaco": &bintree{kernelsHsaco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
