// Code generated by MockGen. DO NOT EDIT.
// Source: memoryallocator.go

// Package driver is a generated GoMock package.
package driver

import (
	gomock "github.com/golang/mock/gomock"
	vm "gitlab.com/akita/mem/vm"
	ca "gitlab.com/akita/util/ca"
	reflect "reflect"
)

// MockmemoryAllocator is a mock of memoryAllocator interface
type MockmemoryAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockmemoryAllocatorMockRecorder
}

// MockmemoryAllocatorMockRecorder is the mock recorder for MockmemoryAllocator
type MockmemoryAllocatorMockRecorder struct {
	mock *MockmemoryAllocator
}

// NewMockmemoryAllocator creates a new mock instance
func NewMockmemoryAllocator(ctrl *gomock.Controller) *MockmemoryAllocator {
	mock := &MockmemoryAllocator{ctrl: ctrl}
	mock.recorder = &MockmemoryAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmemoryAllocator) EXPECT() *MockmemoryAllocatorMockRecorder {
	return m.recorder
}

// RegisterStorage mocks base method
func (m *MockmemoryAllocator) RegisterStorage(byteSize uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterStorage", byteSize)
}

// RegisterStorage indicates an expected call of RegisterStorage
func (mr *MockmemoryAllocatorMockRecorder) RegisterStorage(byteSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStorage", reflect.TypeOf((*MockmemoryAllocator)(nil).RegisterStorage), byteSize)
}

// GetDeviceIDByPAddr mocks base method
func (m *MockmemoryAllocator) GetDeviceIDByPAddr(pAddr uint64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceIDByPAddr", pAddr)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDeviceIDByPAddr indicates an expected call of GetDeviceIDByPAddr
func (mr *MockmemoryAllocatorMockRecorder) GetDeviceIDByPAddr(pAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceIDByPAddr", reflect.TypeOf((*MockmemoryAllocator)(nil).GetDeviceIDByPAddr), pAddr)
}

// Allocate mocks base method
func (m *MockmemoryAllocator) Allocate(ctx *Context, byteSize uint64) GPUPtr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", ctx, byteSize)
	ret0, _ := ret[0].(GPUPtr)
	return ret0
}

// Allocate indicates an expected call of Allocate
func (mr *MockmemoryAllocatorMockRecorder) Allocate(ctx, byteSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockmemoryAllocator)(nil).Allocate), ctx, byteSize)
}

// AllocateUnified mocks base method
func (m *MockmemoryAllocator) AllocateUnified(ctx *Context, byteSize uint64) GPUPtr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateUnified", ctx, byteSize)
	ret0, _ := ret[0].(GPUPtr)
	return ret0
}

// AllocateUnified indicates an expected call of AllocateUnified
func (mr *MockmemoryAllocatorMockRecorder) AllocateUnified(ctx, byteSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateUnified", reflect.TypeOf((*MockmemoryAllocator)(nil).AllocateUnified), ctx, byteSize)
}

// AllocateWithAlignment mocks base method
func (m *MockmemoryAllocator) AllocateWithAlignment(ctx *Context, byteSize, alignment uint64, unified bool) GPUPtr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateWithAlignment", ctx, byteSize, alignment, unified)
	ret0, _ := ret[0].(GPUPtr)
	return ret0
}

// AllocateWithAlignment indicates an expected call of AllocateWithAlignment
func (mr *MockmemoryAllocatorMockRecorder) AllocateWithAlignment(ctx, byteSize, alignment, unified interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateWithAlignment", reflect.TypeOf((*MockmemoryAllocator)(nil).AllocateWithAlignment), ctx, byteSize, alignment, unified)
}

// Free mocks base method
func (m *MockmemoryAllocator) Free(ctx *Context, ptr GPUPtr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", ctx, ptr)
}

// Free indicates an expected call of Free
func (mr *MockmemoryAllocatorMockRecorder) Free(ctx, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockmemoryAllocator)(nil).Free), ctx, ptr)
}

// Remap mocks base method
func (m *MockmemoryAllocator) Remap(ctx *Context, pageVAddr, byteSize uint64, deviceID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remap", ctx, pageVAddr, byteSize, deviceID)
}

// Remap indicates an expected call of Remap
func (mr *MockmemoryAllocatorMockRecorder) Remap(ctx, pageVAddr, byteSize, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remap", reflect.TypeOf((*MockmemoryAllocator)(nil).Remap), ctx, pageVAddr, byteSize, deviceID)
}

// AllocatePageWithGivenVAddr mocks base method
func (m *MockmemoryAllocator) AllocatePageWithGivenVAddr(ctx *Context, deviceID int, vAddr uint64, unified bool) vm.Page {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePageWithGivenVAddr", ctx, deviceID, vAddr, unified)
	ret0, _ := ret[0].(vm.Page)
	return ret0
}

// AllocatePageWithGivenVAddr indicates an expected call of AllocatePageWithGivenVAddr
func (mr *MockmemoryAllocatorMockRecorder) AllocatePageWithGivenVAddr(ctx, deviceID, vAddr, unified interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePageWithGivenVAddr", reflect.TypeOf((*MockmemoryAllocator)(nil).AllocatePageWithGivenVAddr), ctx, deviceID, vAddr, unified)
}

// RemovePage mocks base method
func (m *MockmemoryAllocator) RemovePage(pid ca.PID, addr uint64, unified bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePage", pid, addr, unified)
}

// RemovePage indicates an expected call of RemovePage
func (mr *MockmemoryAllocatorMockRecorder) RemovePage(pid, addr, unified interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePage", reflect.TypeOf((*MockmemoryAllocator)(nil).RemovePage), pid, addr, unified)
}

// MigrateChunks mocks base method
func (m *MockmemoryAllocator) MigrateChunks(pageVAddr uint64, deviceID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MigrateChunks", pageVAddr, deviceID)
}

// MigrateChunks indicates an expected call of MigrateChunks
func (mr *MockmemoryAllocatorMockRecorder) MigrateChunks(pageVAddr, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateChunks", reflect.TypeOf((*MockmemoryAllocator)(nil).MigrateChunks), pageVAddr, deviceID)
}
