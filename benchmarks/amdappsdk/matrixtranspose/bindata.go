// Code generated by "esc -o=bindata.go -pkg=matrixtranspose -private kernels.hsaco"; DO NOT EDIT.

package matrixtranspose

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    9304,
		modtime: 1562355959,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
