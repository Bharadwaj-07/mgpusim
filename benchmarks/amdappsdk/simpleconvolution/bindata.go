// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// kernels.hsaco
package simpleconvolution

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kernelsHsaco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xd3\x56\x1b\x7f\x7c\xec\xb8\xae\x4b\xd2\x52\x4a\x55\x78\x41\xf8\xe5\x7d\x37\xa6\x8d\x46\xa9\x29\x55\x56\x69\x52\xbf\xa0\x43\x94\xa6\xd0\xf1\xb5\x09\x81\x69\x9c\xd4\x90\xd8\x91\xe3\x54\x74\x52\x4c\x4a\xb5\xd2\x0b\xf6\x21\x84\xa6\x5d\xec\x1f\x98\xb4\xbf\x81\x84\x3b\xb6\x2b\x40\xdb\x1d\xd2\x76\x01\xd2\xb4\xab\xfd\x01\x13\x99\x8e\x7d\x4e\x62\x9b\x26\xdd\x47\xab\x6a\x92\x7f\x52\xce\x63\x3f\xcf\xf9\x9d\xe7\x79\xce\x39\x8e\x8f\xed\x73\xfb\xc4\xcc\x49\xc4\x30\x63\x40\xc0\xc2\xcf\xc0\xe0\x83\x1e\xf7\x9c\x1a\x92\x87\xa1\x81\x31\x48\x82\x00\x63\xd0\x05\x9d\xc0\x03\x00\xe7\xa9\x17\x94\x35\xc6\x2f\x05\xa2\x67\x08\xaf\x15\x52\x5d\x7e\x49\xe3\xc1\xbc\x88\xe7\x3c\x28\xfb\x58\xbf\xf4\xf2\x70\xac\x20\x11\x7d\x40\x5e\x03\xbf\xa4\x3c\xf4\x17\x79\x34\xbf\x73\x2f\xad\x34\xf7\x27\x78\xde\xf8\x30\xce\xbe\xb4\xd2\x7c\x9b\x7e\x69\x05\x8e\xf6\x27\x82\x66\xe0\x1e\xf9\x42\xf0\x4b\xce\xc3\x13\x88\xff\xf1\x33\x53\x4e\x75\x3a\x36\xff\x71\xe6\x83\xab\xe7\xa0\xa3\x91\x1b\xd5\x8d\x9f\x99\x9a\x9e\x3b\xef\xd6\xfd\x54\x00\x10\x89\x7e\x70\x70\x50\xbc\xa0\x9a\x45\xcd\xd0\x47\x25\x8a\x8f\xa4\xa1\xa3\x52\x42\xba\x22\x9e\x56\x4d\x5d\xcd\x15\x9b\x16\x51\x92\x06\xa5\x59\x25\xaf\x36\x55\x92\x24\x15\xb5\x7c\x21\xa7\xce\x1a\xfa\xbc\x5a\x50\x4c\xe5\x7a\x4e\x9d\x34\xf4\x25\x23\x57\xb2\x34\x43\x17\x71\x8d\x19\x45\xcf\x96\x94\x6c\x93\x96\x2a\xa8\xfa\xe4\x8c\x34\xe9\xb3\x36\x02\x71\x02\x90\xa5\x2b\x8e\x75\xdc\xcc\x16\x7d\xee\x44\x57\x0c\x4a\xf3\xda\xc7\xfe\x40\x92\x22\x3d\x1a\xcf\x69\x59\x7d\x74\x43\xd3\x05\x25\x57\x52\x4f\x6b\x7a\x9a\x9a\xa7\x73\xc6\x75\x25\x37\x51\xca\x64\x54\xd3\x5f\xeb\x83\xe5\x42\xc3\xc1\xf9\x63\x72\xb3\xf5\x85\x85\xb3\x25\x25\xd7\x6c\x7f\x4a\xcd\x28\xa5\x9c\xd5\xac\x90\x4e\x9b\xf3\x05\x65\x41\xa5\xd5\x5c\x1f\x0d\xfb\x6b\x5d\xa8\xe9\x85\x52\x93\x8e\xfd\xfa\xaa\x1c\x29\x69\xba\xf5\xf6\x91\x9d\xc9\xfc\xe4\xb6\x66\x9e\x57\x8a\x37\xdb\x24\x9e\xc9\x19\xca\x8e\x65\x7e\x6a\x5b\x33\x37\x4a\x56\xfb\x41\xdf\x96\x31\x9f\x58\x76\x54\x5b\x34\xd1\x37\x9e\xc8\x53\x5a\x5e\xd5\xf1\xa5\x5c\x6c\x9d\x1d\x9e\xd1\xf2\xbf\x2c\x39\x3c\x57\xb7\x20\xb7\xe1\xd6\xb9\x0d\xef\x58\x6e\xfa\x89\x5b\x17\xb5\xb4\xb5\xd8\x3e\xab\xad\x1e\xb0\xf7\xb5\x74\x5a\xd5\xdd\x2b\x25\x95\xc9\x14\x55\xeb\x52\x9b\xcb\x71\x64\x78\xfb\xfd\x5f\xde\x61\xff\x1f\x6e\xee\x7f\xd2\x48\xab\x73\xa6\x51\x68\xdc\x16\x09\x05\xdf\xae\x15\x33\x3b\xaf\x66\xf3\xaa\x6e\xb9\x11\x26\x13\xc4\x78\x51\x59\x52\x33\xa6\xa1\x5b\xb3\xa5\xfc\xfc\xf4\xdc\xb9\xe2\xa8\x24\x37\x6c\x86\x79\x53\xb3\xd4\xfc\x6c\x29\x7f\xc1\x35\x0d\x1d\xdf\xb0\x4d\x92\x1a\xed\x86\x69\xd3\x28\x15\x36\x36\xcd\x99\xda\x92\x62\xa9\x1b\x1b\x1b\xb1\xd0\x5e\x1c\x11\xe3\xf1\xb8\xb8\xc9\xba\x09\xaf\x75\xf6\xe3\x15\x65\x60\xfd\x88\xc8\x8f\x09\x12\xda\xae\x4b\xfe\xc6\xc2\x2d\x44\x88\x10\x21\x76\x08\x4c\xe3\x27\xb8\x4f\x76\xaf\xfd\xe1\xf9\xb1\x0a\xdf\xc2\x13\x00\xe8\x02\xff\x3f\xeb\x9c\xe7\xb8\x0f\xba\x7d\x36\x8e\xe3\xf8\x7a\xbd\x5e\xdf\xca\xb8\xb7\x0a\x77\x00\xd5\xf0\xf3\xeb\x2a\xcb\xd7\x06\x9c\x1e\xe0\x6b\x09\x00\xb8\x0d\xf7\xaa\xa8\xce\xac\xe1\xa8\x63\xbb\x90\x2d\x30\xc2\x7d\x01\x40\x06\x00\x99\x99\x46\x76\x1d\x21\x11\xa0\x92\x62\xba\x91\x8d\xe0\x93\x67\xcc\x41\xcc\x5d\x73\x64\x85\x13\x86\x01\xbe\x7f\x52\xe1\x11\xbe\x87\x3c\x45\x9d\x58\xae\x3d\x43\x2c\x02\xc4\xf2\x32\x62\xd1\x08\x03\xf0\x94\xe9\x40\xc0\x60\x0e\x83\xed\x6e\x1b\x2b\x88\x97\x21\xf2\x75\x99\x03\x78\x5a\xb9\xf3\x0d\x83\x18\x6e\x24\xc6\x7d\x59\x46\xf4\xbc\x93\x7b\xb3\xc2\x3d\x28\xb3\x2c\x07\x8f\x10\x92\x2b\xc2\x83\x32\x6e\xb7\x1b\x7d\x55\xbe\x21\x55\x1e\xa6\x60\xbd\xba\x0a\x7c\x0d\xdf\xce\x58\x86\xaf\x49\x24\x97\x08\xe2\x64\x26\x72\xbf\x5c\x41\x9c\x7d\x43\x5a\x7f\x38\x0a\xeb\x55\xea\x73\x15\xf1\x35\xdc\x17\x2c\xcb\xd7\xf0\x2c\x58\x65\x50\xed\x2d\x7c\xff\x63\xf8\x11\x8e\xe7\x64\x80\xef\x9e\xb0\x11\x04\x98\x5b\x41\x82\x5d\x41\xa2\x0d\xd2\x67\x0f\x0f\xc3\x7a\x15\xb7\xcd\xe3\x76\xa2\x00\x1c\x8a\xd9\x1c\xdb\x63\xb3\x6c\x9f\xcd\xef\xed\x97\x2b\x68\xc0\x8e\xc2\xe7\xcf\xee\xf4\x23\xe8\x42\xbd\xb6\xb8\x7f\xbf\xdc\x79\xf0\x40\x12\x60\xee\x79\x14\x20\xba\x8b\xed\xb5\xbb\xb0\xbd\x07\xc1\xae\xfe\x5e\x39\x8a\x0e\xd8\xb1\x7d\xfd\xc9\xce\x88\x64\x77\x45\x0e\xdb\x8f\x19\xe4\xc4\xb5\xd2\xd7\x27\xaf\xf4\xf4\xc8\x8f\x62\x31\xb9\x12\x7b\x50\xb6\x6f\xfc\xba\x56\x80\x7b\xd5\x68\xb4\xd7\xee\xe8\xe5\x8e\xbe\xa8\xaf\x55\xed\xd8\xab\xbb\x2b\x08\xc9\x2b\xa2\x28\x73\x82\x20\x47\x44\xb7\xde\x8f\xd8\x26\xbc\xba\xfb\x1b\x87\x10\xb3\x1b\xc7\x8f\x6c\xc0\x3e\xc1\x19\x1b\x99\x45\xbc\xcd\xb2\x28\x09\x50\x78\xee\xbe\x2b\x59\xa9\xee\xf4\x9c\x0c\x11\x22\x44\x88\x10\x21\x42\x84\x08\x11\x22\x44\x88\xed\x00\xfd\xd6\xfc\x0b\x79\x9c\xa7\x9f\xdb\x07\x88\x8c\x10\x99\x20\x06\xfa\xd4\x7f\x88\x48\xfa\x1d\x79\xa0\xab\x85\x83\x85\x9c\xa2\x67\xa5\x25\xf7\x2b\xac\x34\x1c\x4f\x48\x30\xa3\xe9\x37\x55\x73\x54\x9a\x99\x99\xc2\x8a\xb6\xf1\x31\x24\x8a\x1f\x76\xfb\xf5\x1d\x44\xff\x7b\x40\x1f\x25\xfa\x64\xaf\x5f\xbf\x87\xe8\xc7\x02\xfa\x7d\x44\x7f\x29\xa0\x3f\x44\xf4\x8f\x03\xfa\x37\x88\xfe\x45\x40\xff\x0e\xd1\xf7\xec\xf1\xeb\x53\xb8\x40\x7c\xf3\xfb\x3f\xc1\x50\x8b\xf7\xce\x10\xd7\x0d\x4b\x85\x78\x7a\x59\x2f\x2e\xe7\x21\xbe\xa8\x14\x17\xdd\x33\xcb\x84\xb8\xa5\xde\xb2\x9c\x33\x25\xaf\x2d\x40\x7c\xc1\xc8\xe7\x55\xdd\x82\x78\x71\x39\x6f\x29\xd7\x21\x5e\x5c\x2c\x5a\xa6\x7b\xe4\x4a\x98\x98\x48\x5c\x1d\x72\x4a\xd9\x29\x8f\x39\xe5\xb0\x53\x1e\x77\xca\x11\xa7\x4c\x3a\xe5\xbb\x9b\xbc\xde\xbe\x3a\x75\x79\x76\xfc\xcc\xa9\x49\xf8\xc7\x60\xc8\x18\xd2\x6d\x0a\xad\xf6\x2b\x50\x04\xf7\x8a\x74\x90\xb9\x4a\x69\x74\xfe\x52\x99\xf0\xf0\x18\xcf\xbe\x0c\x3a\xaf\xbb\xc9\xdc\xa6\x7c\x3a\x7f\x1b\x32\x10\x16\x17\x90\x7b\xc9\x3e\x08\x6a\xa7\xd7\x07\x95\x87\x36\xc8\xd7\x8b\x83\xde\x3d\x29\xd0\x7a\x1f\x4b\xab\x06\xfe\x47\xb8\x8d\x6a\x2d\xf6\x97\xd0\x78\x85\x80\x9b\xa3\xa4\xc9\xe0\xd5\x77\x8d\xf0\xff\xbf\x49\xfc\xc7\xbd\x63\xe7\xc1\x3a\xe1\x0b\x84\x20\x92\x5f\xb0\xff\xdf\xf3\xc6\xee\xc1\x17\xff\x75\x65\x6a\x13\xff\xd3\x2d\xf8\x3f\x11\xfe\xa5\x4d\xf8\x7f\x04\x00\x00\xff\xff\x77\xc2\x0b\xf4\xf8\x24\x00\x00")

func kernelsHsacoBytes() ([]byte, error) {
	return bindataRead(
		_kernelsHsaco,
		"kernels.hsaco",
	)
}

func kernelsHsaco() (*asset, error) {
	bytes, err := kernelsHsacoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kernels.hsaco", size: 9464, mode: os.FileMode(509), modTime: time.Unix(1536376204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kernels.hsaco": kernelsHsaco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kernels.hsaco": &bintree{kernelsHsaco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
