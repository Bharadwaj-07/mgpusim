// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// kernels.hsaco
package matrixtranpose

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kernelsHsaco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x6c\xdb\xd6\x19\xff\xf8\xf8\x48\x51\x14\x25\x51\x4a\xe6\xa5\x99\x9a\xb1\x9e\x61\x17\x46\x2c\x38\xaf\x8a\xa7\x05\x18\x16\x2f\x5e\x9c\xa2\x4e\xe2\xd4\x5d\xda\x6c\x2b\x36\x46\xa2\x65\xd5\x12\xa9\x51\x54\x60\x17\x33\xad\xb8\x8e\x0f\x43\xd0\x00\x45\x30\xec\x50\xa0\xe7\x01\x3b\xee\x3c\xbb\xc0\x4e\xc3\x50\xd8\x3e\xe5\xd0\x43\x2f\xbd\xe6\xb4\x0d\x1b\x30\x4c\xc3\x23\xdf\xb3\x24\x2e\x72\xd3\x2d\x43\x30\x54\x3f\xc0\xf9\x91\xdf\xff\xef\x3d\x86\x8f\xd4\xe3\xe6\x0f\x16\x2e\x23\x41\xb8\x08\x0c\x22\x7c\x06\x02\x3d\xd0\xc3\x73\xae\x78\xeb\xa5\x90\x51\x20\x2b\x82\x02\x17\x41\x03\x15\x64\x00\xc0\x3d\x76\x51\xde\x13\xfa\x59\x61\x72\x81\xf9\x0d\xc2\xcf\xe3\xfd\xcc\xeb\xa1\x7e\x52\xcf\x79\x94\xff\x80\xfb\xb9\xd7\x8f\xd6\x0a\x06\x93\x47\xb8\x01\xfd\xcc\xfd\xd0\x97\xf4\xe3\xfd\xbd\xfe\xb9\x57\xc6\x4f\xe1\xd7\x5b\x1f\xc5\x8d\xcf\xbd\xb2\x7c\xcc\xb8\x0c\x02\xe6\xe3\x89\xa0\x5b\x78\x0f\xff\x59\xee\x67\xdc\xe3\xa7\xb0\xfc\xb3\x57\xe7\x02\x73\x3e\x37\xdf\x08\xae\x87\x50\x8e\x21\x76\xd4\x1b\x97\xcd\x5e\x9d\x9b\x5f\xfc\x61\x68\x4b\x2f\x8f\x04\x93\x9b\xf5\x72\xa5\x64\x4f\x99\xf5\x32\xfd\x5b\x69\x9a\x94\x2a\xd5\x77\x4b\xb5\xa9\xca\xf2\x5a\x71\xfa\x15\x16\x7f\x55\x06\x50\x99\xcf\xd4\xd4\x94\x7a\xd3\x72\x9b\x55\xc7\xbe\x60\x70\xfc\xd8\x38\x77\xd6\x98\x36\xde\x56\x5f\xb3\x5c\xdb\xaa\x35\xbb\x1a\xd5\x30\xa6\x8c\x6b\x66\xdd\xea\x8a\x0c\xc3\xa8\x9b\x9e\x5b\x5d\x7b\xc3\x35\xed\x66\xc3\x69\x5a\x2a\x95\x2d\xad\xd7\x6f\x3b\xb5\x1e\xd3\x89\x88\xd5\xc5\xd5\xf2\x44\x60\xb9\x60\xda\x95\x96\x59\xe9\x86\xbc\xde\xb0\xec\x4b\x0b\xc6\xa5\x3e\xed\x51\x91\x41\x71\xc4\x78\x3b\xd0\xce\xba\x95\x66\x5f\x29\x6a\x48\x4f\x28\xd2\x69\x79\x8d\x96\xa7\xf2\xd3\x37\xd6\x1b\x56\x9f\xcd\xc4\x72\xcd\x31\xbd\xc2\xe4\xc4\x91\xc9\x52\xf5\xdd\xfe\x10\xc5\x23\xd5\x6c\xad\x5a\xb1\x2f\x3c\x51\x75\xd3\xac\xb5\xac\xd7\xaa\x76\x99\xab\xe7\x6b\xce\x6d\xb3\xf6\xfd\xd6\xf2\xb2\xe5\xf6\x5b\xd1\x1a\xb8\xd5\xe5\x57\x48\x37\x7a\xb9\xec\x2e\x35\xcc\x92\x75\xa3\x65\xd6\x2e\x1c\x85\xe8\xea\x4b\x25\xae\x09\x31\x67\x2d\x9b\xad\x9a\x37\xb8\xf9\xaa\xfd\xd5\xed\xfd\x76\xcd\x29\xad\xfe\x57\xbd\x17\x06\xf7\x5e\x18\xdc\xfb\xdc\xba\x6d\xd6\xab\xa5\xa5\x15\xd3\xb5\xca\x8b\x4e\xd5\xf6\x9e\x76\x0c\x42\x63\xab\x9b\xec\xdc\xcc\xe0\xf1\x59\x70\x4a\x5f\x66\x78\x9e\xd1\xc4\x5e\xa9\x96\xcb\x96\x1d\xce\xcd\xf5\xe5\xe5\xa6\xe5\xbd\x35\xb8\xb7\x57\x67\x0a\xff\xfb\xfc\xb7\x9e\x73\xfe\x1f\x7d\x71\xfe\x4b\x4e\xd9\x5a\x74\x9d\xc6\xd1\x2d\x8b\xb9\xd0\xdb\xac\xe9\x56\x96\xac\x4a\xdd\xb2\xbd\xb0\xc2\xf3\x7c\xca\xe7\x5d\xa7\xd5\x60\xaa\xcb\xd5\x35\xab\x1c\xea\xa7\x99\x7a\xd1\xad\xde\x31\x3d\x6b\xb0\x41\x7f\x70\xd6\x23\xef\xec\x4d\xf3\x8e\xb5\xec\x3a\x3c\xa9\x61\x1c\x8d\xd4\xb5\x56\x7d\x69\x7e\xf1\xf5\xee\xdd\xf5\xdc\xb7\xbb\x9a\x9b\x7d\x1a\x72\x9e\x69\xae\x9a\x6b\x97\x6b\xa6\xf7\xa6\xe3\xae\x86\x55\x07\x41\xc9\xf9\x19\x35\x9f\xcf\xab\xc7\xae\xa3\x74\xed\x3b\x4d\x57\xfc\xc8\xf3\x84\xd0\xf3\x17\x2e\xa1\xc1\x6a\x88\xe8\xf9\xdf\x7f\xf7\xdd\x07\xa8\x67\xc9\x15\x7a\x03\x46\x56\x9b\xff\x60\x69\x1f\x62\x88\x21\x86\x18\x62\x88\x67\x8e\xee\xba\xa6\x84\x6f\x76\xc2\xf1\xf6\x3b\xf0\x5b\xd8\x8f\xd3\x77\xbd\xfe\x75\xb4\xd8\x73\x9c\x81\x17\xfa\x74\x18\x63\xb9\xd3\xe9\x74\x9e\x65\xdd\xcf\x0a\x08\xd0\x1e\x5d\xe2\xb7\x44\xb4\xa7\x01\xc0\x7b\x48\xde\xa3\x72\x51\x94\xf7\x82\x11\x11\xd0\x1e\x7d\x14\xd8\x84\xfb\xbb\xd0\x41\x3b\xb4\x0b\xa4\x61\x5f\x41\xf0\x41\x0a\xda\x77\x01\xed\xbc\x87\xe6\xb1\x2f\xa3\x94\xbe\x95\x4a\x8d\xc9\x8a\xf4\x41\x07\x63\x15\xa0\x7d\x1d\xa5\xb1\x2f\x21\x99\xc4\x95\xf8\x5d\x19\x72\xba\x04\xf7\x0e\x91\x44\x9f\x1f\x76\x02\xde\xca\xe5\xc6\xe4\x6d\xe5\xfd\xb6\xaa\x17\x00\xfe\xb8\xdf\xd6\x10\x48\x00\x07\x52\x86\xf2\xce\xa1\x24\x21\x80\xb4\x46\xb6\x35\x6d\x2c\xb5\x15\x7b\x5f\x92\x52\x44\x92\xf0\x0c\x02\x38\x40\x69\x04\x88\xc6\x79\x11\x00\x6b\x2a\x11\xe1\xde\xa1\x98\x06\x48\x22\xc5\x97\x59\x9e\xbb\x38\x45\x3e\xc6\x3a\x69\xa3\x97\xfd\x94\x96\x2d\xa4\xb4\x0f\x37\x64\x80\x83\xf6\xd6\x6f\x04\x94\xfd\xd5\x46\x9c\x1d\xc7\x93\xd9\xf1\x76\xf6\xe1\x46\x4c\xc2\xd0\xd6\x1e\x6e\xa0\x0c\x06\x1e\x43\x78\x31\x47\xb6\x73\xb9\x31\x45\xcd\x12\x80\x3f\xed\xa7\x34\x04\xf2\x3b\xb9\x83\x36\x46\x20\x27\x75\x1f\xe7\x72\x44\xc9\x8e\x10\x65\xe4\x34\x51\xe6\x75\xff\x63\xf8\xc7\xef\x93\x28\xe5\x27\xd1\x49\xbf\xa3\xeb\xc1\x38\x28\x69\xdd\x4f\xa2\x53\x7e\x02\xe5\xfd\x04\x9a\xf6\xd3\x70\xef\x50\x49\x22\xd0\x61\x27\xe0\xf6\x99\xd1\x02\xa2\xfd\x1b\x08\xd2\x00\x07\xe9\x6f\xa9\x90\x86\x9d\xc3\x74\x30\x0e\xa3\x24\x9d\x31\x48\x3a\xa3\xcf\x28\x00\x07\xca\x4b\x2a\x28\xd4\xef\x04\x80\x92\x3b\x43\x94\x33\x06\x51\x58\x3c\x04\x9f\xec\xc7\x75\x04\x71\x5d\x2f\x60\xf8\x64\x9f\xca\xb2\x41\x8f\x19\x38\x11\x70\x1c\xe4\x8c\x36\x83\xde\xc9\x1d\x28\x12\x82\xec\xc4\xd8\x78\x7b\xec\xe1\x86\x9c\xd1\xa0\x3d\xfe\x70\x43\x96\xc2\xbe\x65\x8c\x40\x31\xc6\x08\x24\x81\x88\x02\x26\x42\x12\x08\xc0\xbd\x43\x5a\xdc\x47\x58\x1e\x4d\xe1\x71\x82\xe0\xc1\xe1\x36\x46\x90\x11\x26\x89\x86\x81\xe0\x18\x2a\x02\xfc\xe4\x53\x7a\xed\x7c\x34\x79\x76\xb4\x41\xaf\x17\xe1\xc3\x47\x52\xf0\x54\xf8\xe0\x70\x7b\x1c\x81\x06\x40\x62\x62\xd7\x2e\x35\x3e\x4e\xb8\x5d\x3c\x62\xa7\x46\xec\x30\xd3\x29\x94\x27\x11\x70\xbf\x04\x20\xd0\x14\x20\x5a\xa2\x6b\xaf\xea\x67\xc9\xd7\x4f\xe4\x8b\xa9\xc9\x6e\xfc\x24\xa0\xf0\x1a\x86\x5f\xee\x82\xf0\xf8\x51\x8a\x1a\x0a\x8f\x1f\xa5\x01\x30\x65\x9d\xfe\x97\x16\x1e\x3f\xca\x02\xa4\x37\xc5\xfb\xbb\x20\xea\xfe\x26\xba\xbf\x8b\xc5\xac\xbf\x29\xdc\xdf\x4d\x88\x27\x7d\xea\x9f\x16\x47\x7c\x80\x5f\x7c\x3a\xa2\x00\x24\x90\xe2\x2b\xac\x2e\x55\x9f\x24\xa7\x4e\x9c\x2d\xd2\x5a\x05\x51\xf7\x79\x2f\x2a\x00\xd1\xc5\x11\x5f\x12\xb3\xbe\x26\x9e\x0c\x7c\xbf\xa6\x00\x60\x11\x15\x91\xa8\xfb\x19\x71\xc4\x97\xc5\xac\x9f\x14\x4f\xfa\xd4\x97\xea\xc3\x47\xeb\xd0\x3f\x81\xb0\x4f\x63\x20\x11\x15\x45\xf1\x8c\x1f\x13\x0d\x3f\x25\x8e\x06\x71\xe8\x7c\x00\xdc\xdd\x7d\x8e\xb7\x8f\x21\x86\x18\x62\x88\x21\x86\x18\x62\x88\x21\x86\xf8\xbf\x02\xdf\x6b\xfe\x1b\xdb\xdc\x4d\xb0\xf3\x53\x8c\x25\xc6\x3f\x63\xfb\xf0\xfc\xad\x3f\xc3\xf8\x2f\xff\xec\x38\x94\x5f\x66\x7a\xbe\xaf\x7c\x25\xfe\xe4\x7c\x0b\x55\x7b\xd5\x72\x2f\x18\x0b\x0b\x73\x46\x21\x3f\x0d\xa5\x9a\x69\x57\x8c\x3b\xe1\xa6\x2a\x95\x18\xc7\xd7\x1b\xe4\x45\xb1\xee\x7e\x3a\xc3\xa0\xdf\xed\x21\x6f\x3b\x9e\x05\xf9\xf2\xba\xdd\x5c\xaf\x43\xbe\x62\xb7\xf2\x2b\x66\x73\x05\xd8\xbf\x54\xee\xb9\x90\xf7\xac\x35\x2f\x38\x33\xeb\xd5\x12\xe4\x4b\x4e\xbd\x6e\xd9\x1e\xe4\x9b\xeb\x75\xcf\xbc\x0d\xf9\xe6\x4a\xd3\x73\xc3\xa3\x90\xff\xed\x87\xfd\x9f\xce\xdd\xba\x36\x7b\xf5\xd5\x4b\xc7\xd7\xff\xb4\xa0\xfd\xc4\x7a\xf6\x14\x06\xed\xe7\x73\x44\xbf\xa5\x88\xb1\xb9\xe4\x6e\x7c\x7e\x39\x4f\x33\xb9\xc4\x72\xf1\xbd\x7d\x3e\xef\xf4\xd5\xea\xaf\x9d\x8e\xc3\xfd\xf9\xfc\x72\x36\x22\x65\x29\x91\xfc\x2f\xb0\xd8\x5c\xcf\xaf\x07\xce\xa7\x22\xfe\x38\xc2\xdf\x64\xdf\x19\x70\x3d\xbf\xfe\x38\x67\x22\xf9\xa2\x3f\x5b\x4d\xf4\xed\xd5\x0c\xfe\x4e\x64\x50\x80\x29\xe6\x2b\x72\xc1\x80\xef\x37\xa4\x48\xff\x3c\xcd\x0c\x0b\x39\x1d\x49\xd3\x60\xfe\x63\x03\xd2\x73\xfe\x5e\xef\xdc\xf7\xe0\xd7\xcc\xff\x0a\x3b\xe7\x73\x1c\x9d\xbf\xf9\xde\xda\x7b\xf0\x19\xf3\xbf\x35\x20\x3f\xc7\x8d\x01\xfe\xdf\x61\xdf\x01\x9d\xfe\x02\xff\x7f\x05\x00\x00\xff\xff\x08\x2f\x03\x0c\x58\x24\x00\x00")

func kernelsHsacoBytes() ([]byte, error) {
	return bindataRead(
		_kernelsHsaco,
		"kernels.hsaco",
	)
}

func kernelsHsaco() (*asset, error) {
	bytes, err := kernelsHsacoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kernels.hsaco", size: 9304, mode: os.FileMode(509), modTime: time.Unix(1536376204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kernels.hsaco": kernelsHsaco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kernels.hsaco": &bintree{kernelsHsaco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
