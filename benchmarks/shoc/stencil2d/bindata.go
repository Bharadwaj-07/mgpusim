// Code generated by "esc -o bindata.go -pkg stencil2d -private kernels.hsaco"; DO NOT EDIT.

package stencil2d

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    17856,
		modtime: 1562766403,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
