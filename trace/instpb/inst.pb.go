// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inst.proto

/*
Package instpb is a generated protocol buffer package.

It is generated from these files:
	inst.proto

It has these top-level messages:
	Event
	Inst
*/
package instpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Stage int32

const (
	Stage_UNKNOWN     Stage = 0
	Stage_FetchStart  Stage = 1
	Stage_FetchDone   Stage = 2
	Stage_Issue       Stage = 3
	Stage_DecodeStart Stage = 4
	Stage_DecodeDone  Stage = 5
	Stage_ReadStart   Stage = 6
	Stage_ReadDone    Stage = 7
	Stage_ExecStart   Stage = 8
	Stage_ExecDone    Stage = 9
	Stage_WriteStart  Stage = 10
	Stage_WriteDone   Stage = 11
	Stage_Complete    Stage = 12
)

var Stage_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "FetchStart",
	2:  "FetchDone",
	3:  "Issue",
	4:  "DecodeStart",
	5:  "DecodeDone",
	6:  "ReadStart",
	7:  "ReadDone",
	8:  "ExecStart",
	9:  "ExecDone",
	10: "WriteStart",
	11: "WriteDone",
	12: "Complete",
}
var Stage_value = map[string]int32{
	"UNKNOWN":     0,
	"FetchStart":  1,
	"FetchDone":   2,
	"Issue":       3,
	"DecodeStart": 4,
	"DecodeDone":  5,
	"ReadStart":   6,
	"ReadDone":    7,
	"ExecStart":   8,
	"ExecDone":    9,
	"WriteStart":  10,
	"WriteDone":   11,
	"Complete":    12,
}

func (x Stage) String() string {
	return proto.EnumName(Stage_name, int32(x))
}
func (Stage) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Event struct {
	Time  float64 `protobuf:"fixed64,1,opt,name=time" json:"time,omitempty"`
	Stage Stage   `protobuf:"varint,2,opt,name=stage,enum=instpb.Stage" json:"stage,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetTime() float64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Event) GetStage() Stage {
	if m != nil {
		return m.Stage
	}
	return Stage_UNKNOWN
}

type Inst struct {
	Id          uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SimdId      uint32   `protobuf:"varint,2,opt,name=simd_id,json=simdId" json:"simd_id,omitempty"`
	WavefrontId uint32   `protobuf:"varint,3,opt,name=wavefront_id,json=wavefrontId" json:"wavefront_id,omitempty"`
	WorkgroupId uint32   `protobuf:"varint,4,opt,name=workgroup_id,json=workgroupId" json:"workgroup_id,omitempty"`
	Asm         string   `protobuf:"bytes,5,opt,name=asm" json:"asm,omitempty"`
	Events      []*Event `protobuf:"bytes,6,rep,name=events" json:"events,omitempty"`
}

func (m *Inst) Reset()                    { *m = Inst{} }
func (m *Inst) String() string            { return proto.CompactTextString(m) }
func (*Inst) ProtoMessage()               {}
func (*Inst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Inst) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Inst) GetSimdId() uint32 {
	if m != nil {
		return m.SimdId
	}
	return 0
}

func (m *Inst) GetWavefrontId() uint32 {
	if m != nil {
		return m.WavefrontId
	}
	return 0
}

func (m *Inst) GetWorkgroupId() uint32 {
	if m != nil {
		return m.WorkgroupId
	}
	return 0
}

func (m *Inst) GetAsm() string {
	if m != nil {
		return m.Asm
	}
	return ""
}

func (m *Inst) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "instpb.Event")
	proto.RegisterType((*Inst)(nil), "instpb.Inst")
	proto.RegisterEnum("instpb.Stage", Stage_name, Stage_value)
}

func init() { proto.RegisterFile("inst.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xdf, 0x4a, 0xeb, 0x40,
	0x10, 0xc6, 0xcf, 0xe6, 0x5f, 0x9b, 0x49, 0xdb, 0x13, 0xe6, 0xe6, 0xe4, 0x32, 0xa7, 0x22, 0x04,
	0x2f, 0x7a, 0xa1, 0x2f, 0x20, 0xd8, 0x0a, 0x41, 0xa8, 0x90, 0x22, 0xbd, 0x94, 0xb4, 0x3b, 0xd6,
	0xa0, 0xc9, 0x86, 0xec, 0xb6, 0xfa, 0x54, 0x3e, 0x86, 0xcf, 0x25, 0xb3, 0x89, 0x7a, 0x37, 0xdf,
	0xf7, 0xfb, 0xbe, 0x61, 0x87, 0x05, 0xa8, 0x1a, 0x6d, 0x16, 0x6d, 0xa7, 0x8c, 0xc2, 0x80, 0xe7,
	0x76, 0x37, 0xbf, 0x06, 0x7f, 0x75, 0xa2, 0xc6, 0x20, 0x82, 0x67, 0xaa, 0x9a, 0x12, 0x91, 0x8a,
	0x4c, 0x14, 0x76, 0xc6, 0x33, 0xf0, 0xb5, 0x29, 0x0f, 0x94, 0x38, 0xa9, 0xc8, 0x66, 0x97, 0xd3,
	0x45, 0x5f, 0x5a, 0x6c, 0xd8, 0x2c, 0x7a, 0x36, 0xff, 0x10, 0xe0, 0xe5, 0x8d, 0x36, 0x38, 0x03,
	0xa7, 0x92, 0xb6, 0xef, 0x15, 0x4e, 0x25, 0xf1, 0x1f, 0x8c, 0x74, 0x55, 0xcb, 0xc7, 0x4a, 0xda,
	0xfe, 0xb4, 0x08, 0x58, 0xe6, 0x12, 0xff, 0xc3, 0xe4, 0xad, 0x3c, 0xd1, 0x53, 0xa7, 0x1a, 0xc3,
	0xd4, 0xb5, 0x34, 0xfa, 0xf1, 0x86, 0x88, 0xea, 0x5e, 0x0e, 0x9d, 0x3a, 0xb6, 0x1c, 0xf1, 0x86,
	0xc8, 0xb7, 0x97, 0x4b, 0x8c, 0xc1, 0x2d, 0x75, 0x9d, 0xf8, 0xa9, 0xc8, 0xc2, 0x82, 0x47, 0x3c,
	0x87, 0x80, 0xf8, 0x16, 0x9d, 0x04, 0xa9, 0x9b, 0x45, 0xbf, 0xef, 0xb5, 0x17, 0x16, 0x03, 0xbc,
	0xf8, 0x14, 0xe0, 0xdb, 0x0b, 0x30, 0x82, 0xd1, 0xc3, 0xfa, 0x6e, 0x7d, 0xbf, 0x5d, 0xc7, 0x7f,
	0x70, 0x06, 0x70, 0x4b, 0x66, 0xff, 0xbc, 0x31, 0x65, 0x67, 0x62, 0x81, 0x53, 0x08, 0xad, 0x5e,
	0xaa, 0x86, 0x62, 0x07, 0x43, 0xf0, 0x73, 0xad, 0x8f, 0x14, 0xbb, 0xf8, 0x17, 0xa2, 0x25, 0xed,
	0x95, 0xa4, 0x3e, 0xea, 0x71, 0xb5, 0x37, 0x6c, 0xd6, 0xe7, 0x6a, 0x41, 0xa5, 0xec, 0x71, 0x80,
	0x13, 0x18, 0xb3, 0xb4, 0x70, 0xc4, 0x70, 0xf5, 0x4e, 0xfb, 0x1e, 0x8e, 0x19, 0xb2, 0xb4, 0x30,
	0xe4, 0x4d, 0xdb, 0xae, 0x32, 0xc3, 0x66, 0xe0, 0xb0, 0xd5, 0x16, 0x47, 0x1c, 0xbe, 0x51, 0x75,
	0xfb, 0x4a, 0x86, 0xe2, 0xc9, 0x2e, 0xb0, 0x5f, 0x79, 0xf5, 0x15, 0x00, 0x00, 0xff, 0xff, 0x28,
	0xbb, 0xb9, 0xb2, 0xd8, 0x01, 0x00, 0x00,
}
