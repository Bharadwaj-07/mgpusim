// Code generated by go-bindata.
// sources:
// maxpooling.hsaco
// DO NOT EDIT!

package maxpooling

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _maxpoolingHsaco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdf\x4f\x1b\xd9\x15\x3e\xf7\xce\x78\x3c\x1e\xcc\x60\x13\xc2\x1a\x12\xb5\x13\x1a\x2d\x15\x5a\x2c\x33\x78\x2d\x6f\xb4\x52\x43\xa0\x90\x28\x90\x90\xa5\x4d\x9a\xae\x56\x68\xc2\x0c\xb6\xc1\x9e\xb1\xec\x21\x81\x55\x3d\xb1\xd3\x26\x80\x14\xa9\xd1\x96\x46\x55\x15\x95\x7d\x6c\xa5\xfe\x01\x7d\x02\xa3\xbe\xf5\x29\xe1\xa9\x0f\x79\xd8\x97\x55\xfb\x5c\xa9\x7d\xc4\xd5\x1d\xdf\xc1\x1e\x6f\x4c\x7f\x51\xa5\xf5\xce\x27\xf9\x1e\xdf\xef\xdc\x73\xee\x77\xee\xbd\x4e\x32\x99\x99\x87\xdf\x9d\x9d\xc6\x08\x5d\x06\x0a\x06\xbe\x00\x44\xbe\x48\xf5\xbe\xe3\x48\xcb\x75\x3b\x62\x73\x49\xe0\xe1\x32\x04\x41\x00\x0e\x00\xd8\xa6\x71\xad\xb6\x8a\xdc\x96\xa7\x3c\xa2\x71\xed\xc0\xf7\xb9\x2d\x84\x1a\x71\xbe\x26\x7d\xad\xf6\x35\xeb\xb6\xcd\x71\x44\x2b\xc4\x28\xdf\x62\xf3\xe0\xb6\x4e\x1c\xfe\x17\xe3\x9c\xfa\x3e\xfa\xd2\x54\xd9\x7f\x22\xae\x59\x1f\xc1\xad\x2f\x4d\x95\x3b\x61\x5d\xda\x81\xa5\x9f\x75\x5c\xef\xb7\xda\x67\x61\xb7\x3d\x69\xed\x1d\x3d\x83\xa4\xf2\x96\x75\x45\x4d\x1f\xae\x91\x4a\x22\xfd\x8f\xbf\x79\xf0\x1c\xd3\x35\x43\xad\x09\xe7\x94\xf5\x79\xc3\xc8\x4e\x1b\x85\x07\x4a\x41\xb5\x83\x78\x3a\x6e\x62\x6e\xea\x38\x86\xf0\xe7\xec\x73\x58\xe7\x59\xf0\x1f\xaf\xa9\xc3\x4d\xcc\x4d\xcd\xcc\x7f\xbf\x3e\xf6\x02\x00\x74\x51\x5e\xc9\xa9\xa9\x25\x7d\x54\xc9\xa9\xe4\x93\x2e\x2a\xc4\xa4\x32\x9f\x2e\x65\x47\x53\xcb\xeb\xc9\xd8\x38\xcd\xcf\x85\x01\x04\x1a\x33\x3a\x3a\x2a\xdc\xd6\x0a\xc5\x8c\xa1\x5f\x92\x1c\x7c\x2c\x8d\xbd\x27\xc5\xa4\x4f\x84\xeb\x5a\x41\xd7\xb2\xc5\x86\x47\x90\xa4\x51\xe9\x86\x92\xd3\x1a\x94\x24\x49\xee\xda\x04\x42\x2d\x6c\xe4\xee\x19\xd9\xa6\x91\xc3\xee\x41\x97\x57\xd5\x61\x7b\xe0\xac\xa2\xa7\xd6\x94\x54\x23\xe1\xcd\xbc\xa6\x4f\xce\x4a\x93\x2e\xef\xb1\x44\x5b\x9a\x2c\x7d\x62\x7b\x27\x0a\xa9\xa2\x4b\x88\x50\x37\x6f\x90\xa8\x9b\xe9\x82\xa6\xa8\x45\xc1\x21\xbe\xb7\x91\xd7\x5c\xa3\x32\xba\x79\xec\x5c\xc8\x7c\xea\x0e\x8f\x1f\xbb\x26\xb2\x99\x94\x7e\xe9\x8d\xae\xdb\x4a\x76\x4d\xbb\x9e\xd1\x55\xc7\x7d\x65\xc3\xa6\xdc\x03\xc8\xc4\xce\x80\x6b\xe3\x72\x23\xf1\xd2\xd2\xad\x35\x25\xdb\x48\x3d\xa5\x2d\x2b\x6b\x59\xb3\x7d\x4d\xf7\x0c\xd3\x34\x72\x8b\xaa\x62\x2a\xed\xcb\x1a\x5e\xce\x1a\x8a\x39\x32\xdc\xbe\xb6\x64\xfb\xda\x92\xed\x6b\x9b\xc9\x1a\xf7\x94\xec\x95\xb5\xe5\x65\xad\xd0\xbe\xc0\xe9\xe6\x02\x55\xb5\xb0\x90\x57\x96\x34\xa7\xcc\x7a\x8a\xff\x60\x01\xf4\xb5\x5c\x27\xed\xe7\x52\x5a\xd1\xc9\xcf\xad\x93\x6a\x4a\x6b\x99\x54\xda\xec\xa4\x8a\x1e\x64\x54\x33\xdd\x49\x05\xe5\x0d\x23\xab\xa9\x8b\x9d\xb7\x53\xb4\xb0\x8e\xdb\xb0\x55\xfb\x6f\xe5\xc5\x4e\xac\xe9\x41\x27\xd5\x54\x34\x0b\x19\x55\xeb\xac\x7d\xa2\x35\x75\xd4\x3e\xe5\x15\xb5\xb3\x36\x89\x14\xd4\x51\x3b\x64\x1a\xf9\xaf\xf1\x3f\x73\x73\x4a\x71\xf5\x84\xca\x33\xfa\x5b\xab\xfb\xda\x69\xd6\x7d\x4a\xca\xaf\x66\x54\x55\xd3\xeb\x93\xdf\x5c\x5e\x2e\x6a\xe6\x0f\x4e\x28\x20\x11\xff\xef\xcf\x7f\xf7\x2d\xcf\xff\xc3\x7f\x3c\xff\xa4\xa1\x6a\xf3\x05\x23\x7f\x7c\x39\x4d\x43\xae\x6b\x05\x5d\x29\xa4\x16\xb4\x54\x4e\xd3\xcd\xba\xc2\xb1\x31\x67\xd3\x67\x0a\xc6\x5a\x9e\xfa\xa6\x33\xeb\x9a\x5a\x1f\x10\xa3\xee\xf9\x42\xe6\xbe\x62\x6a\xed\x07\xb8\xb3\xd3\x22\x9d\xd2\xee\x28\xf7\xb5\xe5\x82\xe1\xcc\x2a\x49\xc7\x4b\x75\x63\x2d\xb7\x30\x33\xff\x51\xe3\xd2\x7f\x3c\xd1\xf0\xdc\x76\x79\xc6\x9c\x98\x39\x65\x7d\x3a\xab\x98\x77\x8c\xc2\x6a\x5d\xb5\x9d\x54\x7e\x3f\x21\x44\xa3\x51\xe1\xdf\xf8\x0f\x27\x0f\x1e\x3c\x78\xf0\xe0\xc1\x83\x07\x0f\x1e\x3c\xfc\xdf\xa1\x71\x3f\x97\xaf\xdf\x61\xfd\xca\x8d\x5b\x37\x18\xf4\x5b\x78\x69\xdf\x73\x75\x5f\x34\xe4\x9b\xbe\x5f\x04\xd1\xe5\x63\x59\x96\xab\xd5\x6a\xb5\xd3\xd4\x7d\x5a\xc0\x80\xab\x2c\x00\xfc\x18\x70\x95\xf4\x27\x01\x57\xe7\x01\xe0\x21\x3c\xdd\x87\x1a\x3c\x21\xaa\x79\xe0\x3f\xe3\x01\x64\x04\x20\x63\xd8\x2a\xad\x48\xe5\xbd\x3f\xc1\xd6\x3e\x83\xb9\xea\x55\x00\xf8\x3d\xe0\xea\x45\x92\x03\xe3\xea\xb7\x49\x1f\xe3\xea\x7b\x64\xad\x18\x5c\x8d\x91\x9c\x0c\xae\xc6\x89\x9f\xc1\xd5\x24\xf1\x33\xb8\xfa\x21\xf1\xb3\x5c\xf5\x32\xd1\x80\x70\x35\x68\xaf\x3e\x57\x25\xbb\x30\x89\x70\x35\x42\xc6\xb3\xb8\x7a\x9e\x58\x84\xab\x12\xd5\xd4\x73\xd0\x57\x41\x98\xb3\x00\xb3\x16\xb3\x0b\xcf\x18\x40\x15\x04\x91\x2d\x6e\x17\x9e\x71\x80\x2a\xbd\x3e\xff\x67\xe5\x9e\x9f\x55\xfa\xba\x76\x2a\xbd\xec\xcf\xf7\xca\xe8\xf9\x1e\x82\x81\xad\x48\x10\x5b\xbb\xc0\x0f\x0d\x04\x45\x0b\xcd\x60\xab\x86\xb1\x00\x50\xbe\x89\x7a\xb0\xe5\x83\xc7\x87\x68\x0c\x80\x83\x27\xb6\x2d\x0b\xa1\x38\xc0\x1f\x5e\x96\x83\x18\x7c\x00\xaf\x7c\x61\x62\x9f\x1c\xfa\x18\x0c\x2c\x0a\xca\x5c\x80\x1f\xf1\x31\x41\xd9\xc7\xe0\x04\x02\x78\x85\xba\x31\x20\x12\x1b\xc0\xe0\x9f\x11\x2c\x8e\xe6\xab\x60\x51\x3e\xc0\x21\xb9\x26\x08\xf6\x5c\x6c\xf7\x8b\x52\x00\xe0\x55\xf9\xd1\x6f\x10\x17\xe0\x13\x11\xfe\x79\x89\xa5\x7d\xf6\x0c\xff\x6e\x99\xdf\x29\xf9\x7a\x04\x8b\x01\x7e\xc4\xcf\x60\x28\xf7\xee\x94\x50\x18\xc3\x2e\xcf\x0f\xa1\x00\x1e\x41\x01\x31\x8e\xe0\xf1\xa1\x6f\x1c\x80\x25\x7a\xc6\x01\x76\xc5\xe0\x50\x19\x53\xbd\x3c\xd1\x01\xaf\x48\x8c\xad\xa7\x0b\x03\xd7\xc3\xcb\x6c\x37\x3f\x82\xba\x82\x32\xea\xfa\xaa\x5e\xbb\x76\x92\xaf\xeb\x45\x89\xa3\x5a\x7c\x01\x3e\x31\xd0\xac\xad\x9b\x7f\xb7\x82\x05\xd9\xd6\xc7\xf0\x70\x80\xb1\x5c\x0e\xee\x94\x58\x06\x03\x27\xf2\x23\x0d\x7d\x38\xce\x92\x7c\xdd\xe4\xcc\x3c\x3e\xf4\x63\x0c\x35\x1c\xb4\x6a\xb5\x87\x35\xb6\x87\x4f\x90\xb9\xd8\x01\x80\xdd\x50\xef\x10\x0f\x3f\x3d\x7c\x14\xc2\x70\x80\x79\x4b\x14\x84\x84\x20\x60\x19\x87\x59\xd9\x87\x71\xa4\x2c\x08\x83\xcc\x19\x2e\xe9\x63\x1e\x95\x56\xa4\x5f\xee\x7d\x00\x5b\xfb\x24\xaf\xdf\x4f\xf6\xe8\xf1\x61\xaf\x80\xa1\x8c\x5e\xec\xb1\x88\x4f\x10\x9e\x3d\x07\xd0\xc3\x8b\x89\x2e\x31\x24\x97\x45\x71\xb0\x37\x14\x8a\x00\x1c\xbc\xf4\x87\x31\x9c\xe1\x45\xb9\x2c\x86\x06\xfb\x78\x3e\xce\x85\x45\x99\xbf\x13\xb4\xce\xf2\xfc\x20\x17\xe8\x8d\x3b\xda\x88\x06\x90\x7e\xb5\xf7\x0e\x6c\xed\xef\x8a\xa1\x21\x81\x68\x13\x31\xe0\xb3\x7d\x32\xf3\x4e\x7f\xb2\x8c\x3e\xdf\x0b\x30\x21\xcb\xcf\x44\x2c\x80\xf9\xd7\x02\x40\xf7\x41\x28\x24\xff\xa4\xaf\x4f\x2e\xf7\xf7\x27\xcb\xa1\x9d\xd2\x8a\xf4\xf9\x66\x1e\x9e\xee\x77\x77\x6f\xfd\x88\x3b\x17\x04\x76\x80\x87\x4a\x24\x22\x5b\xd2\xd1\xf6\x5f\x6a\xdb\xfb\x96\x74\xb4\x69\x7d\xe3\x68\xb3\x22\x08\xb2\x8f\xd9\x29\xad\x9c\x7f\xb1\xd9\x2b\x8a\xb2\x75\xfe\x68\xfb\x0b\xe2\x3f\x7f\xb4\x69\x0d\x1e\x6d\xee\x02\x1e\xf2\x93\xf9\x01\x43\x18\x63\x2b\x24\xf6\xca\x28\xdc\x97\x0c\x60\x6c\xf1\xa2\x20\x03\xe4\x5f\x07\x38\x00\x14\x0e\x26\x59\xfb\xf7\xf8\xa4\xb4\xd2\xff\x7c\x93\xf0\x3e\x16\xc0\xea\x3f\xda\x9e\xaa\x6d\xef\x03\x54\xf6\xdf\xf6\x9f\x2d\x1e\x3c\x78\xf0\xe0\xc1\x83\x07\x0f\x1e\x3c\xfc\xaf\xe1\xf8\x59\x73\xfa\x9c\x78\x17\xed\x46\xa8\xf5\x51\x9b\xa6\x7e\xe7\xaa\x9f\x3e\xb6\x0e\x7f\x3d\xaa\x19\xc4\xc6\xa8\xdf\x79\xae\x7c\x1e\xbf\x79\xbe\xd9\x8c\xbe\xaa\x15\x2e\x49\xb3\xb3\x53\x52\x3c\x1a\x83\xa5\xac\xa2\xa7\xa4\xfb\xf5\xc7\x9b\x09\x23\x9d\xac\x17\x51\xd5\x1f\x5e\x70\xf3\x7e\xca\x3f\xbd\xe8\xe6\x45\xca\xff\xb1\x85\x3f\x4b\xf9\x3f\xb7\xe4\x39\x47\xf9\x5f\x7f\xcb\xcd\x5f\xa0\x3c\xdf\x92\x67\x98\xf2\xa1\x16\x7e\x94\xf2\xb1\x16\x7e\x9c\xf2\xd9\x16\xfe\x2a\x69\xb0\xbf\xf1\x9e\x00\xc5\x07\x6d\x9e\xc3\x87\xa8\xba\xa1\x17\x37\x72\x10\x4d\xe9\x6b\xd1\xb4\x52\x4c\x03\x6d\x09\x6f\x16\x20\xaa\x1b\xa6\x06\x51\x53\x5b\x37\x6d\x4e\xc9\x65\x96\x20\xba\x64\xe4\x72\x9a\x6e\x42\xb4\xb8\x91\x33\x95\x7b\x10\x2d\xa6\x8b\x66\xa1\xfe\xad\x6e\xe1\xca\x95\xd8\xe2\x58\xbd\x8d\xd5\x4d\xbd\x27\xdb\xed\xb8\xdd\xc6\xed\xf6\x7d\xbb\x4d\xd8\x6d\xb2\xf5\x01\xff\xc5\xa9\xbb\x37\x26\xe6\xae\x4d\xc2\xe9\x00\xd1\xb3\x79\x7c\xac\xb0\xdb\x3a\xcb\xc6\xd2\xb1\xce\x3b\x03\xce\x39\x0e\x00\xc0\xdf\x6a\x35\xc3\x09\x73\xce\xab\x63\xa5\xa6\x79\xa0\x29\xde\xc1\x19\xfa\x5b\x70\xe2\x9d\xf3\xed\xd8\x48\x4b\x3c\xdb\x62\x07\xe8\xfb\x0b\x4e\xbc\xf3\x7b\x72\x6c\xe8\x0d\xf5\x36\xe3\x02\x3d\xe3\x4e\x7c\xbb\xf7\x3b\xa0\x65\x5e\x07\xc3\xee\x77\x36\xda\xbe\x37\xd3\x4e\xc0\x28\x8d\x65\x1c\xa2\xcd\xfb\x2c\x4e\x1a\x67\xfd\x9c\xba\x12\x34\x65\xcb\xf1\x86\x3c\x25\x2e\xb6\x99\xde\xb1\xdf\x69\xde\xfb\x26\xfc\x82\xc6\x4b\x74\x60\x17\xfd\xb4\xee\xff\x4c\xb3\xf6\x26\xfc\x6e\xac\x6e\xef\xb6\x99\xdf\xc1\xad\x36\xf1\x61\xb9\xe1\x3f\x29\xfe\xef\x01\x00\x00\xff\xff\xbd\x44\x9c\xf1\x68\x35\x00\x00")

func maxpoolingHsacoBytes() ([]byte, error) {
	return bindataRead(
		_maxpoolingHsaco,
		"maxpooling.hsaco",
	)
}

func maxpoolingHsaco() (*asset, error) {
	bytes, err := maxpoolingHsacoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "maxpooling.hsaco", size: 13672, mode: os.FileMode(493), modTime: time.Unix(1543854422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"maxpooling.hsaco": maxpoolingHsaco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"maxpooling.hsaco": &bintree{maxpoolingHsaco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

