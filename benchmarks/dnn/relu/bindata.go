// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// relu.hsaco
package relu

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _reluHsaco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6e\x1b\xc5\x17\x3f\xbb\xde\xbf\xe3\x6e\x52\x29\x7f\x81\x50\x0a\x37\x53\x84\x14\xa9\xc2\x2b\xc7\x4d\x22\x2b\x42\x22\x4e\x42\x42\x55\x27\x75\x12\x9a\x12\x50\x55\x4d\xbc\xe3\xcd\x92\xfd\xb0\xf6\x23\xd8\x95\x48\x03\x48\xa8\x17\xb9\x28\x1f\x17\x5c\xf1\x04\x3c\x03\x89\xc4\x0b\x20\xae\x7b\xc1\x4d\x1f\x01\x2e\x31\x9a\xdd\x19\x7b\x76\xc9\xba\x05\x82\x2a\xaa\xfd\x49\xeb\xb3\x73\xce\xf9\xcd\x39\x67\x66\xb4\xd6\x68\xe6\xc1\x3b\x8d\x55\x59\x92\x16\x81\xa1\x00\xbf\x80\x44\x5f\x26\xe3\x36\x37\x3c\xba\x1a\xcb\x6b\x91\xae\x06\x25\x58\x84\x09\x50\xa1\x08\x00\x8a\xe0\x97\x96\x67\x52\x52\x96\x98\x5e\x62\xbc\x2c\x4c\x5c\x4a\x4a\x9e\x0f\xe5\xfd\x4f\x68\xa7\xe5\x23\x29\x29\x45\x1e\xcd\x15\x10\xd3\xa7\x64\x07\x92\x92\xf3\xe4\xbf\xc8\xe3\xf5\x6d\x3d\x09\x74\xe5\x19\x78\x62\x7e\x14\x9b\x4f\x02\xbd\x38\x62\x5c\xb2\xa0\xb0\xa7\x2b\xc7\xed\xb4\xfc\xa6\x98\x94\xa3\xc6\x9e\xe7\xf3\x2a\xad\x3c\x35\xae\x92\xf0\x14\x85\x9e\x68\xfb\x6b\xfd\x74\x57\x66\x63\x26\xa5\x3b\xdc\x22\x8d\xdb\xab\xae\xf7\x31\xf6\x74\xce\x2a\x31\xbf\xfa\xfa\xca\x80\x43\xf5\xaf\x45\xeb\x30\xd6\x2b\x30\x36\x18\x53\xae\xab\xaf\xaf\xac\x35\x6f\xc7\xbe\x74\x59\x8e\x33\x3d\xb6\x75\xa3\xe5\x94\xb1\xad\xd3\x67\xdf\xc7\x54\x18\xe6\xfd\x96\x55\x36\xda\xdd\x5a\xe5\x3a\xeb\x7f\xa2\x08\xa0\x32\x4e\xb9\x5c\x56\x77\x88\xe7\x9b\xae\xb3\x80\x38\x3e\x44\x33\x6f\xa2\x0a\xba\xab\xde\x24\x9e\x43\x2c\x7f\x68\x51\x11\x2a\xa3\x0d\x6c\x93\xa1\x0a\x21\x24\xd4\xa6\xd2\xf6\x76\xcf\xde\x73\x2d\xc1\x6d\x5a\xf0\x58\x3c\xd0\xa7\x23\xaf\x06\x76\x8c\x10\x1b\xc3\xae\x6e\x75\x88\xb3\xdc\x40\xcb\x09\xeb\x20\xb9\x28\xa9\x2a\xba\x1b\x59\xeb\x9e\xe1\x27\x52\x50\x63\x71\x4e\x72\x2d\x37\x74\x02\x95\xb7\xde\xeb\x75\x48\xc2\xc5\x14\x8c\xdb\xe6\xfd\x24\x77\x76\x60\xaa\x5b\xa6\xe1\x2c\x9c\x6b\xda\xc1\x56\x48\x6e\x9a\x8e\xce\xcd\x4b\xbd\x48\x95\x74\xa0\x81\xb9\xc3\x8d\xeb\xd5\x61\xc7\xad\xd6\x66\x88\xad\x61\xd7\x2b\xa4\x8d\x43\x2b\xc8\x2e\xc8\x74\xb2\xab\x99\x6e\x5b\x2e\x0e\xae\x4d\x67\x97\x54\xcb\x2e\xa9\x96\x5d\xd2\x9a\xe5\xee\x61\x6b\x29\x6c\xb7\x89\x97\x5d\xd7\xaa\x58\x97\xae\x7b\xdb\x1d\xdc\x22\xbc\xba\xb8\x8b\x7f\x50\xb7\x1b\x8e\x98\xc6\x17\xa8\xf0\x0b\xca\xfc\x5d\x53\xd7\x89\x13\x07\xbf\xd5\x6e\xfb\x24\x78\x7f\xc4\x8a\x9c\x9f\xfd\xf7\xe3\xef\x3e\xe7\xf8\x1f\x3c\x3d\xfe\xb2\xab\x93\xa6\xe7\x76\x06\x1f\x17\x46\xa1\x1f\x42\xec\x19\xdb\xc4\xb0\x89\x13\xc4\x19\xce\xcd\x33\xe3\x9a\xe7\x86\x1d\x66\x5a\x35\xbb\x44\x8f\xed\x15\x66\x6e\x7a\xe6\x21\x0e\x48\xb6\x43\xb2\x73\x56\x23\xaf\xec\x0e\x3e\x24\x6d\xcf\xe5\x41\x11\x1a\x8c\xd4\x46\x68\x6f\xaf\x35\xb7\x86\xdf\xc1\x99\x99\xa1\x65\x27\x61\x99\x63\x86\x75\xdc\x5d\xb5\x70\x70\xc7\xf5\x0e\xe2\xa4\xa3\x3e\xab\x73\xf3\xaa\xa6\x69\xea\xdf\xf8\xdb\xcd\x91\x23\x47\x8e\x1c\x39\xfe\x93\x18\xee\xe7\x4a\xf1\x0e\xeb\x4f\x1b\xb7\x24\xea\xf0\x3d\xfc\x14\xed\xb9\x92\x7f\x97\x35\xe1\x7d\x3c\xde\xa1\x0f\xa0\x28\x4a\xb1\xdf\xef\xf7\x2f\x32\xef\x8b\xc2\x67\x20\x9f\xd1\x3d\xe1\x8f\x20\x9f\x41\x34\x02\xc5\xb3\x29\x00\x78\x00\x27\xa7\x72\x5f\xfa\x82\x66\x5d\x92\x4a\x5f\x95\x00\xaa\x00\x72\xb5\x20\x3f\xfc\xe4\x23\x74\xfc\xc3\xcb\xf0\xf0\x94\xfa\xd2\x51\x3b\x96\xe1\x08\xe0\xcb\x9f\xbf\x03\x19\x3e\x87\xe2\xd9\x24\xe3\x4b\x72\xf1\x08\x40\xa9\x16\x0a\xc5\x1a\x40\xf3\xb1\x0c\x20\x17\xe4\xd2\x91\x0c\x50\x55\x0a\x72\xad\x03\x27\xa7\xc7\x8a\xf2\x0a\x40\xe7\x71\xb4\x01\x86\x4f\x4f\x9f\xf7\x78\xe4\xc8\x91\x23\x47\x8e\x1c\x39\x72\xe4\xc8\x91\x23\x47\x8e\x17\x13\x83\xb3\x66\x76\x4e\x3c\xce\x9a\x53\x4c\xf2\x9d\xfc\x3e\xb3\xf3\x5d\xff\x65\x26\x7f\xfd\xbd\xef\x52\x59\x61\x76\x7e\xae\xdc\x94\xcf\x8f\xd7\x30\x9d\x03\xe2\x2d\xa0\x46\x63\x05\xcd\x6a\x15\x68\x59\xd8\x31\xd0\x61\x7c\xc8\x49\x35\x68\x74\xbe\x12\xcb\xfa\xad\xff\x27\xf5\x63\x4c\x7f\x92\xd2\x5f\x89\x6a\x1b\x1b\x9e\xbf\x0b\xf9\x9f\x77\xbe\x0d\x9a\xde\x73\xfc\x9e\x0d\x9a\xe1\x84\xda\x3e\xf6\xf7\x81\xfd\x52\x7d\xe0\x81\xe6\xb8\x01\x01\x2d\x20\xdd\x20\xd2\x61\xdb\x6c\x81\xd6\x72\x6d\x9b\x38\x01\x68\x7e\xcf\x0e\xf0\x1e\x68\xfe\xbe\x1f\x78\xf1\x5b\x2c\x61\x69\xa9\x72\x6f\x26\xfa\xad\x26\x0e\xc3\xef\xad\xec\x6e\xd4\xd7\x6f\x2c\x8f\xae\xfb\x59\x21\xb1\x39\x1c\x0c\xbf\x9c\x94\x15\xd6\x54\x98\x2f\x3f\x5b\xe7\xf3\x7d\x09\x00\x7e\xeb\xf7\x5d\x4e\xe3\xf3\xca\x25\x12\xe2\x80\xc0\xe7\x78\x89\xad\x19\xce\xe7\xeb\x80\xcb\xa9\x14\x5f\x49\xc9\x2b\xec\x9c\x9f\xf3\xf9\xba\xe3\xf2\xf2\x39\xf5\x8a\xb8\xca\xd6\x02\xe7\x67\xdd\x83\x80\x54\x5c\x8e\xe9\xc4\xdd\x86\xec\xfb\x25\x59\x09\x94\x19\xb7\xc0\x15\x19\xf7\x3e\x78\xdc\x52\x2a\xcc\x3c\xeb\xb2\x92\x0a\xd3\x61\xfc\x37\x32\xc2\x73\xf9\xb6\x38\xf7\x02\xbe\x65\xfc\x2e\x6b\x8f\x0b\x77\x30\x40\x98\x97\x35\x31\x77\x01\x93\xec\xfe\xcf\x6e\x46\x7c\x8e\xcd\x0c\xbe\xc9\xf8\xaf\x3f\x85\xff\x47\x00\x00\x00\xff\xff\x98\x7a\xcf\xb3\x90\x24\x00\x00")

func reluHsacoBytes() ([]byte, error) {
	return bindataRead(
		_reluHsaco,
		"relu.hsaco",
	)
}

func reluHsaco() (*asset, error) {
	bytes, err := reluHsacoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "relu.hsaco", size: 9360, mode: os.FileMode(509), modTime: time.Unix(1541712327, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"relu.hsaco": reluHsaco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"relu.hsaco": &bintree{reluHsaco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
