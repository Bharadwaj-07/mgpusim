// Code generated by "esc -o esc.go kernels.hsaco"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "kernels.hsaco",
		size:    9368,
		modtime: 1562683160,
		compressed: `
H4sIAAAAAAAC/+xaXW/b1Bt/fJy4jpt2+fc/QRlIMxJS0USszCsj6g3rC+umtV22so2BpuksPknM/BLZ
ztRMIhsFdjUJNIG0D8FnYL3hC+x6F9zsjlu4JOjY5yS2W68dGowX/6TmFz8v53ke+3Hc43PufLB2GgnC
KWAQ4ScQ6JdKdMwVD9+M+Fgoq4MMp6AMCkgAUIjZpXlHSLLM5ALzy8J3k0nm+VC/Yuw4zbMoyXE/miuo
TJ7iLiSZ+6Hn9OP1XXwaGIUD+MXzo7jwNDAkeH4U+Pnkdae4UUpyIeYns/iL6yuhOb82r4f9EMkLMDGq
jcsW11dWG5ciW9oek0yObaPddKrYNuhfx8eU2ubtplVtt7bqtRNs/B9lAIX5VKtV5TLxfNN1FlSOT9Tj
76g19ZpyjngOsfyxRlHVqrqBbTIWqarasty+cQV7fgdbVgP7vkKlm337hmvFjOd22Z26acyFtmvYafdw
ezzs+S5xltfU5YR2lGiYoK5eC7WLXttPpKNEtEeiXRx0Vkw/wE6TLPVaLeIpXPVhv0sS9nM90wmOzY0M
Ns3bycHqI9WiZbadhT1Vl7HVI+dMx+DqVcu9ga1U8NCKZsCtLp3Qx6MbhrfZxU1yoYethdEQY32zyTUR
VkgL96zg2afhP1y+07M3XIP42cXT2rMrn8+ufD678qV+KDpg0X/gmvr/6IJeUH+dMQ2DOFGLnG+1fBJ8
lJ3g2ZPzf378qy85/scvIf6G6zyjL87WD3hz51kdNKtl1yANz+2OHoTMiz7AsdfeJG2bOEGU93v8rlz1
3F6XqU6bW8SI9DWmbnjmLRyQbIPk4Kxynu8VfIu0PJcHVdVRr2307M3VxsXxM1vXx5rLCc1x7rOOt05b
OLjiejejrMNB9XdPKpqmKc/4/0yI/R3J0OXIkSPHXwmBTRGFcHYn7vtD9AV8D9+U6Fwv+Wt3Jvb9FZhO
zk0LBWk4HA7/jvVvA9qhc1FRVHaiua20Q6fkYkHZmQWAu6gwuAP3H6GhdI9WULiH7hbvitsikgcISQOA
M09EAFGW5AcygF4B0AVAD5A4PUBQ1qdQZYBEZTCFZgdT6MigC/cfleCrxyUJgQhfP94uIyiJSJ9BSKdy
QQAoS2VdLk3XSwLShRlZl6kdQqBQlhGUK5Je/r9cLx+u6FOvztQBGjSHIuVojt54IgFINJYkgA6T2599
qm7/ILBxDiFlMI2QDtClflAsFuoCggE9ji7/54/yOyNHjhw5cuTIkSNHjhw5/l3ga80Nts7Ol9tnGRcZ
f8sUSuy9AcUvvw1dyh2m5+vKX07uHW/NdG4Sb0FdW1tR57UaNC3stNVb0YKqWtdq6v7vK2jWP/8vKZ9g
8sMzSfkUzRlJu/YHHKUfaGK8Ls+hOW5AQDP6jt+3QWs7Pa2D/Q6wTyoPPNACshWER9g2m6A1XdsmTgCa
37cDfAM0v+MHXvQtYlhaql0/Hn7qsGsBGq6vXN1YXD+7/CLf60zEtgFk7QcYvaOB3edzMubG+4NzvD+E
2L4HLj8EAL8Ohy735/3B+Y1UWnIq/mtsbJTqJ86VlH8hxUfZPgWU6l/Owp59NcZcfM8IZO8zyRqgynxF
LsjY/1FM1c/DnGRD1lJhusz/rYzwnN+PX/sYHjL/LRjf78U9rt9qPPcYKmwf0NV9zt+FDH+T+b+9j//v
AQAA//9CobqTmCQAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
