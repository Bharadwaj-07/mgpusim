// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// kernels.hsaco
package kmeans

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kernelsHsaco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4f\x6c\xd4\x56\x1a\xff\xfc\xec\xf1\x18\x27\x24\xb0\x1b\x69\x59\x76\x57\x6b\x96\x68\x23\xa1\x64\x34\x19\x02\x3b\x1b\xb1\xdb\x4c\x92\x26\x20\x12\x18\x08\x85\xd2\x16\x45\xce\x8c\x67\x32\x64\xc6\x9e\xda\x1e\x9a\x44\x30\x99\x19\x12\x84\x2a\x0a\x55\x4f\x1c\x2a\xf5\x5c\xa9\x87\x1e\x7b\x69\x3c\xa8\x1c\x38\xf4\x40\x39\x23\xb5\x17\xa4\xf6\xd0\x63\xab\x9e\x3a\x95\xed\xf7\x66\x6c\x37\xce\x1f\x14\x0a\x04\xff\xa4\x79\x9f\xfd\xfd\x79\xef\xfb\x9e\xbf\x37\x7e\x7e\xf6\x5b\x7a\x7d\x62\x0c\x51\xd4\x10\x60\xd0\xf0\x1d\x50\xe6\x81\x60\x9f\x13\xc1\x17\x31\x9b\x22\x8b\x17\x07\x0e\x86\xa0\x1d\x78\x60\x01\x80\x71\xe8\x79\x69\x9d\x72\x53\x0e\xf3\x29\x6c\xe7\x87\x1b\x5d\x6e\x0a\x7b\x5a\x76\x21\x87\x7f\x5e\xfa\x80\x71\x53\xa7\x9d\xe9\x2b\x44\x31\xdf\x43\x8b\xe0\xa6\xc4\x0e\x6d\xd1\x8e\xc4\x77\xf6\x89\x9e\x66\x36\x61\xe7\xf4\xcf\xc4\x99\x27\x7a\x9a\x5d\xa7\x5f\xfc\xc0\x90\xfe\x44\xd0\x72\xdc\x41\xbf\xde\xeb\xa6\x8c\xc3\x8e\xc3\xed\x27\x26\x47\x2d\x75\x72\x6d\xfe\x66\xe5\x83\xcd\x67\x20\xdc\x8c\x8d\xf0\x12\x93\xa3\xe3\xc9\x37\x6c\xdd\x03\x00\xd0\x86\xf9\x62\x21\x9d\x4d\xc9\x7d\x62\x21\x6d\xfe\x66\x35\xd1\x24\xd9\xdc\x62\x2a\xdf\x97\xcd\xcc\xc7\xa3\x87\x71\xfd\x89\xbd\x00\x3c\xb6\xe9\xeb\xeb\xe3\xcf\x4b\xaa\x96\x53\xe4\x41\x81\xe0\x6d\xa1\xbf\x57\x88\x0a\x97\xf8\x93\x92\x2a\x4b\x79\xad\x25\xe1\x05\xa1\x4f\x38\x25\x16\xa4\x16\x4b\x10\x84\xb9\x82\x24\xca\xda\xf4\x9c\xa5\x3d\x9d\x52\x0a\xc5\x92\x2e\xf1\xa6\x64\x6a\xa1\x30\xa3\xe4\x1d\x06\x3d\x6b\xea\x0e\xcd\xa5\x7b\x2c\xfd\x09\x51\xce\x96\xc4\x6c\xab\xfa\xd3\x45\x49\x1e\x99\x10\x46\x5c\xd2\xa6\xc3\x96\xa3\x31\xe1\x92\x25\x4d\xa8\x59\xcd\xe5\x16\x6f\x93\x35\x1c\xce\x48\xa2\x5e\x52\x25\x9e\x9c\x9f\x5b\x28\x4a\x2e\xa5\x9e\x4c\x5e\x11\xf5\x43\x3d\x4d\x8d\xa9\xdc\xa2\xbb\x8a\x78\x53\x94\xc8\xe7\xb2\xf2\xe0\x9a\xa2\xf3\x62\xbe\x24\x9d\xcc\xc9\x69\x22\x1e\xcf\x2b\x33\x62\x7e\xb8\x94\xc9\x48\xaa\x5b\xcb\x74\x81\x68\x8d\x1d\x8e\xb5\x6a\x4f\xa7\xd5\xa9\xa2\x98\x92\xce\x94\xc4\xfc\x60\xb3\x8a\x96\x3c\x95\x22\x12\x1b\xa3\x52\x46\x2c\xe5\x75\xff\xe0\x53\xf9\x92\xa6\x4b\xaa\xf6\x6a\x46\x5f\x90\x0a\x33\x92\xaa\xcd\xe6\x8a\xeb\xc4\x9f\x93\x9f\x5b\xf4\x27\x9e\x69\xf4\x72\x51\xc9\xc9\xfa\x3a\x97\x3e\x27\xeb\xfe\x71\x0f\xf8\xc7\x3d\xe0\x1f\xf7\xf0\x82\xc5\xda\x64\xc8\x5b\x0f\x69\xe3\x7c\x7e\x09\x83\xc2\xff\x50\x3b\x2a\x28\x25\x93\xd1\x24\x7d\x27\x45\xa4\xe5\x16\xd7\xb9\x89\xbc\xf0\xf1\x6c\xd3\x1f\xdb\xf1\x5c\x3a\x2d\xc9\xf6\x7f\xd3\x69\xeb\x1a\xbf\xb9\x8e\x83\x47\x07\x9e\x7d\xfb\x17\x9f\x73\xfb\x6f\x6d\xdc\xfe\x88\x92\x96\x92\xaa\x52\x6c\x4e\x59\xb0\x89\x39\xe5\x12\xd5\xec\x94\x94\x2d\x48\xb2\x6e\x7b\x18\x8f\x62\xe1\xb8\xaa\x94\x8a\x58\x34\x96\x9b\x97\xd2\xb6\x9c\x88\x93\x6a\xee\x8a\xa8\x4b\xfe\x0a\xee\xca\x71\x8c\x24\xb2\x0b\xe2\x15\x29\xa3\x2a\xa4\x51\x41\x68\xf6\xd4\xa9\x52\x61\x6a\x3c\x79\xb6\x35\xbb\xea\x8f\xb7\x24\xe7\x5d\x12\x22\x98\x14\xe7\xc7\xf2\xa2\x7e\x41\x51\xe7\x6c\xa7\xad\x3a\x63\x47\x8e\x6e\x66\x06\xa9\xbd\x27\x16\x37\x35\x7d\x34\x15\x83\xb9\xe3\x1f\x38\x7b\xc2\xc1\xb7\xae\xd0\x2b\xd7\x03\x3b\x71\x06\xb5\x03\x26\x1b\xc1\xad\xec\xe5\xb8\x95\x59\x37\x00\xe1\x45\xba\x95\xf5\x3f\xfd\xad\x2c\x12\x89\xf0\x1b\xac\x0f\x51\x00\xb0\x1f\xd8\xe6\x3a\x99\x8e\xd7\x85\xfe\x42\xf8\x07\xed\xf3\x07\x54\x4b\x9f\x72\xac\x9b\xed\xb2\xed\x86\xcc\xf3\x7a\xf1\xdd\x2f\x97\x0e\x7e\xb0\x48\xe3\xb5\x20\xe7\x72\x93\xb3\x3d\x58\x73\x8d\x05\x7e\x7f\xeb\xdc\xda\x52\x57\x80\x00\x01\x02\x04\x08\x10\x20\x40\x80\x00\x01\x9e\x12\xad\x79\x3e\x67\xcf\xe6\xa9\xf5\xf5\xab\xf0\x19\x3c\xb4\xde\xf5\xba\x9f\x38\x92\x8e\xe3\x3f\x35\xdf\x14\xdb\x60\x18\x86\x6d\x34\x1a\x8d\xed\xf4\x7b\xbb\x50\x03\x54\x67\x00\xe0\x2b\x40\xf5\x7d\x56\x0f\xb0\xf5\x28\x00\x2c\xc1\x2d\x03\x35\xa8\x1b\xa6\xd7\x1c\xc5\x7d\xc4\x01\xc4\x00\x20\x46\xc3\xdd\x6b\x97\x85\xca\xea\x24\xdc\x34\x4c\xdd\x3d\x00\x70\x1d\x50\xfd\xef\x00\x50\x41\x4c\xd9\xb2\xab\x32\xc6\xff\x60\xc5\xa0\x29\x54\x37\x1f\x9b\x2a\xb0\xb2\x6a\xf2\x99\x0a\x32\x7a\x61\xd9\xa0\x11\x5b\x37\xdb\xbe\x4e\xb1\x75\xb3\xa7\x98\x4f\x42\x1f\x32\xb5\xf7\x6f\x37\x10\x2a\x37\x1a\x4b\x4b\xa6\xbe\x59\x57\x05\xb1\x65\x06\x6e\xad\x02\xcd\x59\xf5\xb2\xd4\xed\xd5\x0a\xe2\xcb\x21\xb8\xf3\xa8\xc6\x21\xa0\x39\x2e\xb6\x0b\x75\x94\x39\x9e\x8f\x85\x77\xb7\xc7\x01\x92\x8f\x43\x00\xa1\x71\x1a\x59\xf5\x77\x2c\x77\x54\x3a\x2b\x9d\xb5\xf6\x7b\xed\xd5\xf6\x4a\xd8\x28\xc2\x2d\x63\x37\xcf\xb3\xa1\x36\xb6\xf7\xc7\xc6\x8a\x11\x42\x5c\x39\x54\x0d\x55\x59\x9e\xad\xd0\x74\xed\x6a\xb8\x2d\x5c\x43\xbb\x18\x08\x21\xd6\xa0\xc2\x08\xbe\x6d\x2c\x1b\x6d\x50\x33\x9a\x7e\x59\x3e\xd5\xae\x86\x10\x6b\xd9\xa1\x30\x03\x28\xc4\x1a\x14\xc0\x37\x14\xf5\x29\xf5\x4b\x63\xd9\xa8\x20\x54\x06\xd3\x3f\x40\x40\x21\xb6\x6c\xf5\x19\x8d\xe2\x00\xc5\xc7\xf6\x43\x62\xd5\x00\xa8\xbc\x30\xbf\xad\xe6\x7f\xc2\x27\xff\xe3\x8e\xe3\xb6\x97\x30\xff\x69\x40\x56\x2e\x8f\x00\xaa\x77\x39\xc6\x83\x3d\x0e\x90\x3d\x0e\x90\x3d\x0e\x68\x6b\x2c\xdc\xbd\x86\xe0\xfe\x43\x0a\x28\x40\x97\x6b\x37\x90\xb0\xbc\xfa\x0f\xb8\x69\x5c\x07\x3b\xb7\x69\x9c\xdb\x08\x56\x1e\x99\xdd\x6a\xe7\xf2\x9d\x47\x35\x06\x59\x75\xd2\x08\x95\x11\xc7\xc5\xa8\x36\x3e\x4e\xd3\xa8\xcc\xe2\x9c\x31\x73\x98\xb1\xaf\x42\x8c\xba\x47\x55\xcd\x1c\x65\xda\xd9\x18\xd3\xc9\xc5\xa9\x0a\x6b\x54\x19\x26\x66\xe6\xb1\x99\x4f\x34\x05\xf0\x43\x63\xd9\xb0\x73\x2a\x40\x80\x00\x01\x02\x04\x08\x10\x20\x40\x80\x00\x1b\x81\x7c\x6b\xfe\xf0\xcf\x36\x6d\xc3\xe7\xfb\x30\x0d\x61\xfa\x0e\xfe\x0e\x9f\x3c\xf5\x1c\xc2\xf4\xa7\x5f\x1b\x8a\xa5\x8f\xe5\xe4\xbb\xf2\x63\x5d\x6b\xb7\x37\x91\x93\xe7\x24\x75\x50\x98\x98\x18\x15\x06\x22\x51\x48\xe5\x45\x39\x2b\x5c\xb1\x3f\x86\x31\x39\xc2\xfa\xfe\x52\xd8\xeb\x63\x07\xdc\xfc\x30\xe6\x17\xff\xe5\xe6\x77\x60\xfe\xc7\x1e\xfd\x2e\xcc\xff\xdc\xc3\xdf\x8f\xf9\xdd\x9e\x7a\x04\xcc\x8f\x7a\xf8\xff\xc6\xfc\xa4\x87\xdf\x4b\xf8\xdd\x6e\x7e\x0c\xf3\x67\x3d\xfc\x38\xe6\xdf\xf7\xf0\xb3\x66\x81\xc2\xad\xfd\x03\x18\xff\xf7\x79\x9f\x7b\xce\xe7\x7d\x2e\x44\x64\x45\x97\x20\x92\x5e\x90\xb5\x85\x02\x44\xb2\x72\x29\x32\x2b\x6a\xb3\x80\x4b\x93\xaf\xab\x10\xd1\xa5\x79\xdd\x3a\x13\x0b\xb9\x14\x44\x52\x4a\xa1\x20\xc9\x3a\x44\xb4\x85\x82\x2e\xce\x40\x44\x9b\xd5\x74\xd5\x3e\xb2\x29\x0c\x0f\x47\xa7\xfb\xed\x32\x6a\x91\x01\xab\x3c\x62\x95\xff\xb1\xca\xb8\x55\xfe\x17\x86\x87\xfb\x2d\xd5\xfe\xe9\x98\x55\x1e\xde\xfc\x1b\xe2\xe9\xd1\x8b\xa7\x12\x93\x27\x46\x60\x9b\x40\xe1\x9c\x69\xbe\xb7\xf6\xd9\x2f\x41\xe0\xdd\xab\x12\xc6\x63\x85\x98\x91\xf1\x43\xe8\x71\xcc\x0f\xe1\xb6\xc8\x8a\x00\x19\x57\x9d\x00\xf0\x73\xa3\xa1\x10\x7b\x32\x7e\x08\xed\xf6\xb8\xc5\x79\xda\xff\x2b\xae\x9b\xc8\xc9\x78\x23\x54\xf0\xd8\x33\x1e\xfa\x4f\xfc\xee\x9e\xc8\xc9\xf8\x26\xf4\x90\xa7\x3d\xef\xb2\x48\x8f\x73\x4f\x0d\xf8\xef\xc3\xf1\xab\xa0\x0f\xdb\x92\xef\x07\xfc\xf6\xc7\x84\x3c\xf1\xe3\xed\x32\x70\x14\x57\xe9\x19\x16\x50\xc4\x8c\x6e\x9f\xe6\x09\x7d\x6d\x8d\x6f\x16\x4c\xdc\xc5\xf6\x49\xac\x68\x5e\xe3\xf6\x35\xae\xdf\xb8\xd3\x77\x07\xbe\xef\xb7\xe9\x45\x9f\xf6\x09\xce\xf8\xd8\x27\xf0\x3e\x2b\xef\x37\x11\x5e\xfb\xdf\x02\x00\x00\xff\xff\x50\x11\x3d\xe4\xb8\x35\x00\x00")

func kernelsHsacoBytes() ([]byte, error) {
	return bindataRead(
		_kernelsHsaco,
		"kernels.hsaco",
	)
}

func kernelsHsaco() (*asset, error) {
	bytes, err := kernelsHsacoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kernels.hsaco", size: 13752, mode: os.FileMode(509), modTime: time.Unix(1536376204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kernels.hsaco": kernelsHsaco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kernels.hsaco": &bintree{kernelsHsaco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
