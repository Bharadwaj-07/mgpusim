// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// kernels.hsaco
package matrixmultiplication

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kernelsHsaco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x50\x5b\x57\x7a\xff\xee\x39\x57\xd2\xe5\x70\x2d\x84\x24\xcb\x80\x09\xbe\x10\x62\x53\x7c\x90\xc5\x01\xe3\x6b\x19\x63\x50\x10\x42\x16\x18\x13\x62\x7b\x9d\xf8\x9f\x02\x02\x13\x83\x20\x42\x78\xb1\xeb\x9c\x5c\xc9\x58\x49\xb3\x2c\x76\xdc\xb4\xb3\xdd\x66\x37\x79\xeb\x76\x26\x0f\xfb\xb6\x7d\xb2\x9c\xe9\x4b\x67\xdb\x4e\x0d\x4f\x79\xf0\x43\x5f\xf6\xa1\x99\x4e\x1f\x3a\xd3\x4e\x1f\x76\x4a\xe7\x5c\x5d\x81\xc4\x18\x3b\x9b\xcd\x76\x33\x13\xbe\x19\xf4\xe9\xfc\xbe\xf3\xfd\x3b\xf7\x9c\xf3\x1d\x5b\xe7\xbe\x17\x1e\x1a\x40\x92\xd4\x0b\x16\x61\xf8\x57\x90\xc4\x17\xad\xd0\x2e\x0a\xae\xb3\x02\x6f\x35\x31\x1d\x14\xe8\x05\x15\x08\xd8\x01\x40\x2e\xe9\xb7\x9d\x3f\x96\xca\xb9\x62\xe1\x92\xa5\xb7\x13\x35\x7b\xca\x39\xb8\xb6\xf4\x6c\x25\xf1\x6d\xe7\x4a\x55\x39\x2f\xd5\x13\xb1\x42\xc0\xc2\xb7\xf1\x79\x28\xe7\x45\x3d\xf4\x3b\xea\x15\xf3\x7b\xed\x37\xe9\x09\xf9\x6b\xe8\x95\xc6\x27\x68\xf4\x37\xe9\x09\xfb\x73\xc6\x65\x27\x92\xad\xbf\x5f\xa0\x42\x7b\x3b\xbf\xe3\x2a\xe7\xcf\x1b\xfb\x62\x3c\x75\x22\x73\x6b\x5c\x3f\xb3\x15\x78\x65\x11\x3f\x68\xe5\x5b\xb1\xd5\x5f\x2a\x19\x67\x33\x1e\xcd\x30\xdb\x9f\x6b\xf8\xb3\x5f\xb5\xbc\xf3\x01\x36\xe7\x57\x61\x4c\xa5\x67\x39\x9d\x9d\x9d\x8d\x25\x52\xc9\xc4\xcc\xd6\xb7\xab\x33\x73\xe3\xf1\x99\x82\x3d\xc5\xd2\xeb\x1b\xee\xdf\xb4\x21\xf0\xfd\x96\x5d\x81\xcb\xe0\xd8\x7c\x06\x45\xac\x6f\xb8\x3f\x72\xf6\x5c\xa1\x6f\xa3\x95\x83\xc0\xe3\xb3\x13\x53\xe3\xc9\xb6\xf8\xec\x84\xf8\xbb\xbe\x10\x17\x6c\x6a\xfa\xf6\xf8\x4c\xdb\xd4\xe4\x92\x1e\xe8\xb0\xec\xff\x67\x15\x00\xb1\x74\xda\xda\xda\xc8\xf9\x44\x6a\x61\x7a\x2e\x19\xd4\x8a\xf4\xa6\xd6\x4e\xb5\x80\x76\x99\x14\x62\x5e\xd8\x92\x10\x4d\x6b\xd3\xce\xc4\x67\x13\x5b\x90\xa6\x69\x9b\xd9\x11\xd1\x1a\xbb\x35\xfb\xd6\xdc\x4c\x49\xa7\x43\x9b\xf2\xde\x1b\x13\x87\xcc\x3e\x43\xf1\xe4\xd4\x62\x7c\x6a\xcb\xcc\xc8\x7c\x22\xf9\xea\x90\xf6\x6a\x99\x74\x33\x30\x33\x20\xa6\x5d\x36\xa5\x7d\xa9\xa9\x85\x32\xf7\xa4\xc0\x9e\x15\x58\x3c\x9d\x9a\x5e\xea\x23\xc5\xf6\xeb\xb7\xe6\x13\x65\x9d\x0e\x4d\xce\xcc\xc5\xd3\x9d\xad\x87\x36\xbb\x8c\x4d\xdf\x2e\xb7\xa1\x6f\x8a\xfa\x66\xa6\xa7\x92\xc1\x67\x8a\xce\xc7\x67\x16\x13\xb1\xe9\xe4\x44\x51\x1c\x99\x99\x7b\x2b\x3e\x13\x5a\x9c\x9c\x4c\xa4\xca\x7b\x89\x18\x8a\xbd\x06\x3a\xd8\x96\xf5\x89\x89\xd4\xd8\x7c\x7c\x3c\x31\xba\x18\x9f\x09\x6e\x9a\xd8\x92\x8f\x8f\x17\x25\x05\xea\x4f\x4c\xc6\x17\x67\xd2\x2f\xca\x3e\xf4\xbd\xce\xfe\xd5\xef\x69\xf6\x3f\x9c\x9e\x48\x5f\x7f\xce\xc4\x5f\x9c\x4e\xa6\x77\xce\xbb\x73\xe7\xbc\x3b\x77\xce\x3b\x74\xcb\x84\x76\x4e\xf9\x5c\x69\xca\xdf\x2c\xa5\xe7\xcc\xe6\xef\x7e\x4a\xdf\xd2\xfc\x1a\x9c\x9e\x98\x48\x24\x0b\x53\x64\x64\x72\x72\x21\x91\xfe\xc1\xce\x01\x46\xbb\x3a\xff\xf0\xfe\x2f\xfe\x91\xfd\xbf\xf1\x62\xff\xaf\xce\x4d\x24\xce\xa6\xe6\xe6\x37\x4b\x87\xa5\x22\x0a\x53\x3c\x35\x35\x96\x98\x9a\x4d\x24\xd3\x85\x08\x37\x43\x8e\xa4\xe6\x16\xe7\x2d\xd1\xc0\xf4\x52\x62\xa2\x20\x0f\x58\xe2\xb3\xa9\xe9\x9b\xf1\x74\x62\xe7\x0e\xe5\xc6\xad\x1c\x8b\x99\x5d\x88\xdf\x4c\x4c\xa6\xe6\x8a\x4e\xb5\x2d\xb7\x67\x16\x67\xc7\x22\x67\x5f\xdb\xaa\x72\xed\xfa\x96\xe4\x7c\x99\xa4\xab\xcb\x92\x0c\xc7\x97\x06\x66\xe2\xe9\x0b\x73\xa9\x1b\x85\xa8\x4d\xa3\xec\x68\xd7\x0b\x4a\x76\xe1\x40\xf2\xa2\xc2\x5d\xe8\xb5\x5b\xbe\x77\xcb\xf7\x6e\xf9\xfe\xff\xc8\xfe\x45\xe5\xfb\x8f\x51\xea\xa2\xbf\x57\xf5\x7e\x6b\x66\x6e\xfc\xc6\xef\xb7\x94\xbf\x59\x5e\xfd\xb7\x92\xf1\xd9\xe9\xf1\xb1\xeb\xf1\x54\x62\xe2\xec\xdc\x74\x32\xfd\x75\x1f\x6b\xa1\x73\x62\xcb\x59\x7b\xd7\xce\x8f\x7c\x68\x73\x1b\xfd\x5a\xe3\xb3\x7b\x14\xd8\x3d\x0a\x7c\xa3\xa3\x40\xc7\xd1\x9d\x8e\x02\xc7\x8e\xbe\xf0\x28\xe0\xf7\xfb\xc9\x37\xf8\xcf\x98\x5d\xda\xa5\x5d\xda\xa5\x5d\xda\xa5\x5d\xda\xa5\x5d\xda\xa5\x5d\xda\xa5\xef\x20\x6d\xfd\x6e\xab\x14\x7e\x31\x7d\xe6\x0f\xb3\x5b\xf4\x00\x3e\x87\x27\x15\x00\x95\x50\xfe\x0f\xa3\xde\x92\xef\x6e\x08\x95\xc9\x64\x59\xb6\x6f\x6c\x6c\x6c\x7c\x9b\x71\x7f\x5b\x94\x05\xf4\x58\x36\x33\xb7\x3f\x76\x01\xc0\xdf\x03\x7a\x5c\x03\x00\x77\x11\x7a\x5c\x2f\x70\x4c\x1e\x6b\x00\xf0\x1e\xac\xe4\xd1\x06\xca\x89\x2c\xe4\x9c\x6c\xd8\x0c\x5b\x56\x46\x32\xb7\x21\x3b\x07\x18\x7c\x8a\x00\x90\x82\x94\x87\x0a\x00\x23\x59\x74\x1f\x1b\x8e\xbc\x0a\xc0\xe6\x85\x1e\xdc\x5b\xaf\x90\x11\x48\x36\xc4\x9c\x08\xb1\x2c\x22\xcd\xff\x04\xcb\x79\x9c\xad\xbc\x9f\x21\x88\xed\x83\x7b\xeb\x95\x08\x41\x96\x20\x86\x25\xfb\x63\x11\x57\xad\x85\xdd\x25\x88\xdd\x95\xec\x8f\xc5\xd3\x31\x10\xe5\x7b\xe1\xde\xba\x6d\x1f\xc0\x7e\x4b\xee\xc3\x4d\xdc\x87\x9b\xb9\x0f\x1f\xe4\x3e\xdc\xc2\xab\x71\x1d\xaf\xc6\x4e\x5e\x8d\x11\xcf\x10\xb5\x25\x4b\x7c\x2d\x77\x49\x4d\x0b\xca\x2a\xab\x28\x53\xb1\x8a\xee\x92\x87\x06\xfc\xe8\x11\xe0\x20\x77\xe3\x7a\xee\xc1\x0d\xdc\x8b\x35\xee\xc6\x2e\xee\xc1\x6e\xee\xc5\x5e\xee\xc6\x32\xf7\x60\x3b\xf7\x62\x85\x1f\x80\xfb\xeb\xcb\xad\xc2\x4f\x80\x8b\x31\xb0\xa1\x10\x97\x7b\x7a\x58\x63\x5f\xaf\xde\x28\x64\x7e\x21\xeb\xe4\x36\x34\xc0\xe5\xd0\xeb\xec\xe5\xf0\xf9\x02\xce\x04\xae\x73\x1b\x1a\xe4\x72\xe8\x12\x6b\x0e\x5f\x29\xe0\x5d\x02\xef\xe6\x36\x74\x9a\xcb\xa1\x09\xf6\x4a\x78\xb2\x80\x07\x11\x38\xd0\x19\x6e\x0f\x0d\xb1\x43\xe1\x33\x3a\x0a\x86\x98\x0f\xf7\x73\x53\x16\x12\xb2\xb3\xdc\x1e\x1a\x60\x2d\xe1\x41\x1d\xe0\xd2\xd3\x03\x00\x0d\x82\xbf\x0c\xd0\x24\xf8\x41\xf3\x46\xc2\xa5\xa7\xad\xe6\x15\x95\x4b\x4f\xfd\x00\x7e\xc1\x19\x00\x73\xa0\x19\xee\x40\x49\x5e\xb9\x5c\x99\xa9\xc4\x24\x9f\x96\x57\xf2\x07\xc2\x01\x72\x20\xd2\x49\x0e\x44\x75\x72\x20\x36\x4f\x16\xf0\x4a\xbe\x61\x38\x40\x1b\x46\x3a\x69\xc3\xa8\x4e\x1b\xc6\xe6\x69\x45\xb0\x9b\xf9\x70\x0f\x6f\x10\x31\x74\x23\xb0\x77\x77\xb3\xae\x53\x3d\x7a\x0a\xad\xe4\x0f\x87\x53\xe4\x70\x24\x4d\x0e\x47\x6f\x92\xc3\xb1\xf3\xe4\x1d\x69\x25\x7f\x24\xbc\x44\x8e\x44\x6e\x93\x23\xd1\x3b\xe4\x48\xec\x0a\x11\xcf\xbe\x23\xcc\x49\x47\xc4\x20\x1d\xd1\x2c\xe9\x88\x4d\x12\x11\x53\x03\x40\x13\x79\x86\xed\x63\xa7\x7a\xf4\xd6\xe1\x14\x6d\x1d\x49\xd3\xd6\xd1\x9b\xb4\x75\xec\x3c\xf5\x0f\x2f\x51\xff\xc8\x6d\xea\x1f\xbd\x43\xfd\x63\x57\x28\x1b\xe6\x94\x8d\x18\x94\x8d\x66\x29\x1b\x9b\xa4\x99\xd6\x56\xa6\x04\x83\x2c\xe3\xf7\xb3\x0c\x63\x2c\xd3\xd5\x65\xce\x39\x2d\x1c\xa0\x5a\xa4\x93\x6a\x51\x9d\x6a\xb1\x79\x4a\xc3\x29\x4a\x23\x69\x4a\xa3\x37\x29\x8d\x9d\xa7\x81\xf0\x12\x0d\x44\x6e\xd3\x40\xf4\x0e\x0d\xc4\xae\xd0\xce\x30\xa7\x9d\x11\x83\x76\x46\xb3\xb4\x33\x36\x49\x8b\x71\x0a\x5b\x8d\xe1\x00\x6d\x8c\x74\xd2\xc6\xa8\x4e\x1b\x63\xf3\xb4\x2d\x9c\xa2\x6d\x91\x34\x6d\x8b\xde\xa4\x6d\xb1\xf3\xb4\x3d\xbc\x44\xdb\x23\xb7\x69\x7b\xf4\x0e\x6d\x8f\x5d\xa1\x47\xc3\x9c\x1e\x8d\x18\xf4\x68\x34\x4b\x8f\xc6\x26\x69\x75\x7b\x13\x72\x1f\x6d\x46\x9e\xe3\x07\x91\xf7\x9d\x16\xb4\x67\xa1\x0e\x39\x17\xeb\x51\xd5\x0f\x1b\x90\xeb\x82\x86\x1c\xb7\x9c\x48\xf9\x53\x17\xaa\x78\xd7\x8d\xc8\x55\x2f\x92\xde\x43\x08\x65\x64\x84\xef\xda\x91\x3c\xa5\xa0\x2b\x1b\xf7\xf2\x1e\xc8\xe6\x0d\x84\xb8\x84\x65\x2e\x61\x3b\x97\xb0\xc2\x65\xec\xe5\x32\xd6\xb8\x8c\x5b\xca\xe6\x3a\xc6\x6e\x8e\xb0\x8b\x4b\xd8\xc9\x31\x6e\xe0\x08\xd7\x73\x09\xd7\x71\x8c\x0f\x72\x84\x9b\xb9\x84\x9b\xb8\x4d\xac\x23\x1b\x80\x58\x4f\x76\x9b\x58\x5b\x2a\xf7\x89\x35\x65\x03\xb0\x49\xc4\x5c\x93\xaa\x4d\xec\x73\xf7\xd7\x97\x09\x02\x09\x05\x38\xf8\x7c\xac\xa6\xb6\x46\xdf\x2b\x11\x06\x70\xe7\x69\x65\x75\xa9\x9c\x98\x72\x5b\x6d\x8d\xee\x2b\xca\xf7\x3c\x5b\xbe\x4f\x22\xcc\xb6\x89\x03\x07\x42\x18\xec\x51\x75\x53\xc7\x21\x56\xff\x9d\xa7\x36\x73\x1f\xce\xe4\x01\x8c\x3f\xe8\xdf\xef\xba\xff\xbb\xa5\x17\xef\xff\x2f\x43\xac\x4c\xf6\x5d\xde\xff\x91\xb5\xff\x23\x8c\x1e\xab\xe6\xbe\x5f\xa8\x03\x58\x2e\xd4\x01\x6c\xdb\xda\xff\xc1\xda\xff\x15\x84\x1f\xaa\xd8\xc8\x00\x5a\xbd\x2b\xe7\xc0\xb0\x19\x52\x56\x12\x75\x00\xc9\xc5\x5a\x20\xbb\x3e\x85\x07\xf0\x73\xb8\xef\x02\x57\xc6\x95\x75\x3f\x70\x7f\xea\x79\x60\xc0\x47\x8f\xdc\x48\xe6\xd5\x70\xff\x11\x06\xc2\x3c\xc8\xce\x9d\xf2\x97\xef\x22\xa8\x5d\xf3\x12\x04\xfc\x6d\x23\xb7\x0f\xa9\xbc\x1a\x7e\xfc\x48\xac\x3b\x2c\xea\x86\x82\x40\x72\xd8\x99\xcf\x6e\x67\x86\xaa\xe8\x18\xee\xaf\x67\xed\x08\x40\xfa\xea\x51\x35\xe4\xf2\x62\xde\xda\xb1\x93\xdb\xb1\x8b\xdb\xb1\x9b\x57\xe0\x06\x5e\x81\xfd\xbc\x02\x77\x71\x05\xd7\x73\x07\xae\xe3\x76\x5c\xc3\x15\x4c\xb9\x03\xb7\x72\x3b\x6e\xe1\x0a\xee\xe4\x0e\xcc\xb8\x1d\x07\xf8\xdf\x48\xd9\xbc\x53\x55\xf8\x86\x98\x9f\x60\x8c\x18\xce\x7b\x06\x46\x85\x1a\x64\x10\x85\xca\x61\x85\x63\x5b\xa1\xfe\x60\xa9\x50\x13\x8d\xaa\x5c\x76\x43\x51\xc8\x6f\x37\xde\xbb\xba\xa1\x10\x02\x60\x1c\xb1\x1d\x27\x7c\x83\x28\x14\xc0\xf8\x17\xb9\x4a\xe5\xb6\x2a\xc2\xf1\x17\x38\x53\x0f\xb9\x75\xf5\x9a\x04\x0e\xc8\xad\xdb\x54\x04\xb2\x58\x77\x04\x81\x22\xd6\x9d\x8a\xa0\x42\xb4\x55\x04\xce\x6c\xd5\xaa\xa3\x42\x61\x72\xb5\x93\x99\xb2\x2a\x04\x04\x72\xeb\x76\x0f\x82\x4a\xc1\xab\x10\xa8\xc2\x46\x15\x02\x87\xd0\x11\xf2\x6a\x17\x33\x7c\x5e\xbd\x52\xb4\x3d\xc2\x56\xce\xe4\x06\x52\xb8\x0f\x7e\xfd\xc4\x09\x12\x54\x56\xbb\x18\xf1\xb8\x74\xb5\xc2\xad\x2b\x55\x4e\x66\x87\xda\x35\x61\xcb\x70\xbb\x74\xc7\xdb\xf5\x6b\xb6\x6a\x2b\x06\x67\xc1\x9f\x88\x45\xb5\x62\x73\x22\x9f\xcb\x89\x90\x8b\x78\xdc\x8c\x58\x71\xaa\x1e\x37\x33\xe5\x1e\x04\x55\x56\x7c\x7b\x04\xdf\x8b\xc0\x05\xb9\x75\xc7\x5e\x61\xe7\x9e\xc9\x9d\xa2\x2d\xe4\xb5\x35\xcc\x68\xa8\xd3\x45\xdc\xa2\x4d\x6a\xbd\x6c\x4f\xa3\x57\x77\x56\xb8\x75\x52\xe5\x64\x86\xdb\xad\xdb\xaa\x09\xb3\x89\x78\x3c\x08\xec\x55\x2a\x33\x08\x31\xfb\xbb\xcd\xb1\xca\xad\xbb\xd5\x42\x7c\xa2\x9d\xf5\xb9\x9b\xc5\x98\x78\x84\x4c\xe8\x7b\x5d\xba\xf0\xe9\x51\x11\xd8\x05\xae\x22\x10\xfb\x9b\x90\xe7\x10\x6a\x16\x3e\x94\x3d\xaa\x5e\x59\xe1\xd4\xed\x95\x84\x19\x4e\xd5\xb4\xed\x54\x0b\xb6\x9d\xa4\x10\xb3\xe0\x86\x94\x7b\xa4\xe6\x7e\xba\x2a\xec\xba\xbd\xde\x4e\x0f\x72\x71\xa5\xca\x19\x74\x7a\x5d\x5d\x86\xd3\xd7\xed\x74\xfd\xe5\xbb\x0a\xc0\x9a\x91\xfd\x5b\xc9\xf0\x7d\xfc\xee\x17\x2e\x17\x64\x49\x0d\x33\x54\x9f\x9e\x21\x75\x0c\xe0\x1f\x9f\x38\xbd\x08\x0c\xb5\x5e\x27\x66\x3f\xb1\xa1\xfc\xfa\x89\xe1\x44\x60\xb8\x7e\xfa\xae\x03\x60\xed\x0b\x2f\x02\x80\x7f\x36\x31\xe7\x3e\x17\x54\x02\xac\xd9\xab\xc5\x38\xa9\x62\x57\x59\xb3\xed\x29\xc4\x8f\x5f\x01\xa8\x90\x54\xe6\x5c\x86\x55\x24\x67\x1e\xd9\x24\x60\xcb\x2a\x69\x16\x6b\x51\x26\x1a\x03\xad\x89\x41\x53\x33\x83\xe6\x83\x4c\x75\xc2\x43\xc8\xd6\xac\x62\xd5\xc8\xc8\x98\x70\x19\xab\x5c\xc6\x4e\xee\xc0\x5d\xdc\x81\xfd\xdc\x81\x1b\x38\x48\x3f\x5b\x7e\x69\x19\x56\xed\xe2\xbc\x82\x19\x97\x71\x80\xdb\x31\xe5\x36\xdc\x6a\xd6\x10\x3b\xae\xe7\x36\x5c\xc7\x65\x5c\xc3\x1d\xd8\xcd\x0d\xf8\xab\xcc\x4b\xf7\x44\x7f\x17\xb7\x61\x27\x97\x11\x62\x06\x7c\x92\x79\xb2\xf1\xb3\x5f\xa9\xf7\x7e\xbe\xaa\xfe\x52\x7b\x88\x70\xd0\xf4\x65\x17\xfe\x81\xb0\x06\xf8\x68\xfd\x13\x05\x41\x05\xea\xe5\x4a\x77\x3f\xd3\x4e\x0d\x98\xe7\x95\x26\x80\x06\x37\x21\xcc\xbd\x6c\xac\xba\xc9\x20\xfb\x02\x7e\xfb\x48\x42\xa7\x39\xf4\xf7\xb3\x97\x63\x03\xfa\xa7\x83\xa7\x9b\xdc\x83\x43\xac\x59\xd4\x85\x41\xa1\x7f\x96\x2b\x83\x83\xac\x25\x76\x5a\xff\x74\xe8\x4c\xd3\x41\x81\x0f\x09\xfc\x35\xae\x0c\x0d\xb1\x3f\x19\x39\xa3\x73\xdf\x57\x39\xb1\x4f\x80\xf4\xc9\x97\xae\x06\xb1\x4b\x15\xfc\x14\xb1\x6a\x0b\x6b\x2e\xc1\xdc\x16\x76\xb0\x04\xf3\x34\x68\x85\xfd\x0d\x3e\xcc\xff\x35\xbc\x9f\xff\x34\xd8\xdd\x74\xc0\x3a\x93\xed\x45\x84\x7b\x7b\x7a\x98\xad\xaf\x57\xdf\x83\x08\x57\x83\x21\x66\x3b\xd9\xaf\x17\xcf\x65\xa6\x3c\x14\x62\xb6\x70\xbf\x6e\xc0\xfb\x8f\x24\x4c\x78\x2d\x79\x83\xd5\x93\x4b\xec\x25\x72\x85\x69\x3d\xe7\x99\xf0\xd7\x08\xf0\xf2\x01\xd4\xcd\x3b\x50\xed\x5a\x43\x0f\x02\xed\xf8\x0f\x8a\xe7\xb8\x43\x62\x2c\xf6\xa3\xb7\xf9\x01\xb9\x76\xad\xae\x07\x41\xe7\xdb\xf5\x6b\xda\x49\x02\x4f\xde\x98\x61\xff\xf0\x46\x8a\x7d\x76\x29\xd9\x05\xf0\xef\x5f\x1e\x03\x38\x26\xf8\x71\x80\xe3\x82\x77\x01\x9c\xd0\x44\xdf\x1b\x6e\x33\xa7\x0e\x80\x8e\x9f\x5c\xca\x76\x89\xef\x87\x01\x0e\xef\x47\xd7\x78\x23\xd4\xae\xd5\x85\x10\xfc\xf2\x0a\xef\xfa\xc5\x95\xdb\x5d\x4d\x6f\xd7\xaf\x35\xc5\xc5\xfe\xf9\x1f\x5f\xda\x00\x8e\x08\x3b\x27\x01\x4e\x0a\x7e\x0a\xe0\x94\xe0\x7d\x00\x7d\x8e\x65\x47\xa6\xca\xa1\xe4\x1f\x10\xc2\xc4\xd9\x30\x10\xe9\x26\x81\x68\x8e\x04\x62\x1f\x90\xc0\xf0\x35\xd2\x1d\xf9\x90\xe8\x91\x07\xa4\x3b\xba\x42\xba\x63\xab\x44\x8f\x3e\x24\x7a\xec\x63\xd2\x3d\xbc\x44\xf4\xe1\x79\xf2\x9e\xb4\x92\xef\x8d\x0c\x90\xde\xe8\x20\xe9\x8d\x9d\x26\xbd\xc3\x43\x24\x55\xb5\x92\x3f\x31\xf2\x21\x3d\x31\xba\x42\x4f\x8c\xad\xd2\x13\xe7\x96\xe8\xb1\x91\x07\xf4\xd8\xe8\x43\x7a\x6c\xec\x63\x7a\xec\xdc\x3c\x3d\x35\x32\x40\x4f\x8d\x0e\xd2\x53\x63\xa7\xe9\xa9\x73\x43\xf4\xc8\x48\x37\x3d\x32\x9a\xa3\x47\xc6\x3e\xa0\x47\xce\x5d\xa3\xef\x54\xad\xe4\xdb\xa7\xba\x69\xfb\x74\x8e\xb6\xdf\xf8\x80\xb6\xcf\x5e\xa3\xc7\xa7\x3e\xa4\xc7\xa7\x57\xe8\xf1\x1b\xab\xf4\xf8\xec\x12\x15\xcf\xb2\x6f\xea\x01\xed\x9b\x7e\x48\xfb\x6e\x7c\x4c\xfb\x66\xe7\xe9\xc9\xa9\x01\x7a\x72\x7a\x90\x9e\xbc\x71\x9a\x9e\x9c\x1d\xa2\xf3\x55\x2b\x79\x76\xa1\x9b\xb2\x8b\x39\xca\xde\xfc\x80\xb2\xcb\xd7\x68\xf0\xc2\x87\x34\x78\x71\x85\x06\xdf\x5c\xa5\xc1\xcb\x4b\x34\x74\xe1\x01\x0d\x5d\x7c\x48\x43\x6f\x7e\x4c\x43\x97\xe7\x69\xcf\x85\x01\xda\x73\x71\x90\xf6\xbc\x79\x9a\xf6\x5c\x1e\xa2\x35\x27\x03\xa8\xf6\x7d\x86\xea\xfe\xac\x13\xed\x8f\x77\x21\xef\x8f\x5a\xd0\xde\x1f\xb7\x22\xdf\x7d\x8a\xf6\xdd\xf2\x23\xf5\xa3\x1a\xb4\xe7\xcf\xeb\x90\xf3\x2f\xea\x51\xd5\x3b\x0d\xc8\x1e\x51\x91\x23\xea\x44\x4a\xcc\x85\x2a\x86\xdd\x68\x71\xe3\x9e\x39\xe7\xec\x19\x57\x06\xe0\xdf\x9e\xb8\xbc\x08\x6a\x82\x41\xc6\xe1\xab\x9c\x4b\xca\x3d\x6a\xdd\x78\x3f\x2f\x89\x7d\xa0\x56\x9c\xcf\x80\xab\xcb\xc6\xaa\xf8\x37\x14\x88\x35\x06\x08\x2a\x91\xcc\x09\x00\x43\x18\x99\x67\x27\xa8\x01\x90\xcc\x1a\x0c\x4c\xb2\x59\x98\xd7\x2c\xf3\x5b\x6d\x75\x5b\xdb\xbc\x6c\x2d\xce\x59\xdf\x4f\xda\xbc\x6b\x6e\xdd\x13\xaf\xb4\x9a\x35\x16\xb7\xae\x7d\xc3\x8a\x25\x2f\x9e\xfa\xf6\x5b\xfc\xbf\xfe\x77\x63\x4e\xf0\x41\x4b\x5e\xbc\x57\x3e\x83\x9e\xed\x6f\x68\x3a\x79\x23\x91\x0a\x6a\x43\x43\xfd\x5a\xa7\x3f\x00\xe3\x33\xf1\xe4\x94\x76\xb3\x70\xf3\x49\x20\xda\xf3\xe3\x95\xac\xa8\xb5\xa6\x72\xdc\x61\xe1\x9f\x37\x97\xe3\x7b\x2c\xfc\x7f\xb6\xe1\x1e\x0b\x97\x5b\xca\xf1\x5a\x0b\x1f\x3c\x5c\x8e\x1f\xb0\xf0\xd7\x69\x39\xfe\x8a\x85\x1b\xfe\x72\xfc\xb0\x85\x7f\xb6\x0d\x37\x4f\xc6\xc8\xb1\xf5\x3e\x80\x45\xed\x3b\xdc\xb7\x3f\xb1\xc3\x7d\x7b\xf0\x4f\xdc\x4a\x2e\xdc\x9a\x05\xff\x54\x72\xd1\x7f\x3d\xbe\x70\x1d\xac\x4f\x81\xa7\x53\xe0\x4f\xce\xa5\x13\xe0\x4f\x27\x96\xd2\x26\x16\x9f\x9d\x1e\x07\xff\xf8\xdc\xec\x6c\x22\x99\x06\xff\xc2\xad\xd9\x74\xfc\x2d\xf0\x2f\x5c\x5f\x48\xa7\x0a\xdf\x0a\x1c\x42\xa1\xc0\x55\x66\x7e\x76\x98\x9f\x9d\x10\x0a\xb5\x9b\x48\xbb\x89\xb4\x5f\x3d\x6a\x7e\x76\x99\x9f\xc7\x9e\x73\x69\xff\x6a\xff\xc5\x33\x7d\xc3\xd1\x57\xe1\x5b\x20\xc9\x9a\x9b\x9b\xd3\x0a\x95\xf3\x41\xab\x29\x5b\x7d\x8b\xef\x00\x14\xe7\xb1\x18\xb6\xff\xde\xd8\x98\x2b\xaa\x15\xe7\x6b\x91\x37\x97\xf8\x81\x12\xfd\x22\x79\xac\xb5\x50\xd4\x2f\xce\xef\x22\xd7\xb6\xe9\xcb\xdb\x78\x6d\xc9\xbb\x0f\x50\xb2\x9e\x8a\x7c\xff\x33\xf2\x2d\xa5\x46\x6b\x8e\x17\xf5\x77\x7a\xbf\x03\xb6\xf9\x2d\xd2\xa1\xd2\x77\x60\x60\xe7\xf7\x66\x76\x0a\xa0\xcd\xd2\xc5\x45\x60\x87\xf7\x59\x8a\x7e\x8b\xe3\x57\x0c\xab\xcb\x32\xb9\x6d\xda\xc3\xbc\x05\x34\xef\xe0\xbe\xc8\x4f\x95\x3e\xfb\x12\xfa\x89\xa5\xaf\x59\x1d\x2b\xad\x3d\x6a\xfb\xf3\x8f\x94\xc6\x5e\x42\x7f\xd7\x5e\xe0\x17\x77\xf0\x5f\xa4\xd1\x1d\xf4\xab\xad\xf7\xa2\x5e\x7f\x81\xfe\xff\x05\x00\x00\xff\xff\x32\x90\xc3\x5e\x68\x35\x00\x00")

func kernelsHsacoBytes() ([]byte, error) {
	return bindataRead(
		_kernelsHsaco,
		"kernels.hsaco",
	)
}

func kernelsHsaco() (*asset, error) {
	bytes, err := kernelsHsacoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kernels.hsaco", size: 13672, mode: os.FileMode(509), modTime: time.Unix(1541715002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kernels.hsaco": kernelsHsaco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kernels.hsaco": &bintree{kernelsHsaco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
