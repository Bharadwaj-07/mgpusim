// Code generated by MockGen. DO NOT EDIT.
// Source: memoryallocator.go

// Package mock_driver is a generated GoMock package.
package mock_driver

import (
	x "."
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockmemoryAllocator is a mock of memoryAllocator interface
type MockmemoryAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockmemoryAllocatorMockRecorder
}

// MockmemoryAllocatorMockRecorder is the mock recorder for MockmemoryAllocator
type MockmemoryAllocatorMockRecorder struct {
	mock *MockmemoryAllocator
}

// NewMockmemoryAllocator creates a new mock instance
func NewMockmemoryAllocator(ctrl *gomock.Controller) *MockmemoryAllocator {
	mock := &MockmemoryAllocator{ctrl: ctrl}
	mock.recorder = &MockmemoryAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockmemoryAllocator) EXPECT() *MockmemoryAllocatorMockRecorder {
	return m.recorder
}

// RegisterStorage mocks base method
func (m *MockmemoryAllocator) RegisterStorage(initAddr, byteSize uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterStorage", initAddr, byteSize)
}

// RegisterStorage indicates an expected call of RegisterStorage
func (mr *MockmemoryAllocatorMockRecorder) RegisterStorage(initAddr, byteSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStorage", reflect.TypeOf((*MockmemoryAllocator)(nil).RegisterStorage), initAddr, byteSize)
}

// Allocate mocks base method
func (m *MockmemoryAllocator) Allocate(ctx *x.Context, byteSize uint64) x.GPUPtr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", ctx, byteSize)
	ret0, _ := ret[0].(x.GPUPtr)
	return ret0
}

// Allocate indicates an expected call of Allocate
func (mr *MockmemoryAllocatorMockRecorder) Allocate(ctx, byteSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockmemoryAllocator)(nil).Allocate), ctx, byteSize)
}

// AllocateWithAlignment mocks base method
func (m *MockmemoryAllocator) AllocateWithAlignment(ctx *x.Context, byteSize, alignment uint64) x.GPUPtr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateWithAlignment", ctx, byteSize, alignment)
	ret0, _ := ret[0].(x.GPUPtr)
	return ret0
}

// AllocateWithAlignment indicates an expected call of AllocateWithAlignment
func (mr *MockmemoryAllocatorMockRecorder) AllocateWithAlignment(ctx, byteSize, alignment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateWithAlignment", reflect.TypeOf((*MockmemoryAllocator)(nil).AllocateWithAlignment), ctx, byteSize, alignment)
}

// Free mocks base method
func (m *MockmemoryAllocator) Free(ctx *x.Context, ptr x.GPUPtr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free", ctx, ptr)
}

// Free indicates an expected call of Free
func (mr *MockmemoryAllocatorMockRecorder) Free(ctx, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockmemoryAllocator)(nil).Free), ctx, ptr)
}

// Remap mocks base method
func (m *MockmemoryAllocator) Remap(ctx *x.Context, pageVAddr, byteSize uint64, deviceID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remap", ctx, pageVAddr, byteSize, deviceID)
}

// Remap indicates an expected call of Remap
func (mr *MockmemoryAllocatorMockRecorder) Remap(ctx, pageVAddr, byteSize, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remap", reflect.TypeOf((*MockmemoryAllocator)(nil).Remap), ctx, pageVAddr, byteSize, deviceID)
}
