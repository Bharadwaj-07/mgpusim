// Code generated by "esc -private -pkg=layers -o=bindata.go trans.hsaco gpu_gemm.hsaco relu.hsaco maxpooling.hsaco"; DO NOT EDIT.

package layers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/gpu_gemm.hsaco": {
		name:    "gpu_gemm.hsaco",
		local:   "gpu_gemm.hsaco",
		size:    13800,
		modtime: 1592168288,
		compressed: `
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
/xcAAP//aVmkveg1AAA=
`,
	},

	"/maxpooling.hsaco": {
		name:    "maxpooling.hsaco",
		local:   "maxpooling.hsaco",
		size:    22672,
		modtime: 1593203467,
		compressed: `
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
`,
	},

	"/relu.hsaco": {
		name:    "relu.hsaco",
		local:   "relu.hsaco",
		size:    13904,
		modtime: 1592168288,
		compressed: `
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
/afZ/xoAAP//bciEz1A2AAA=
`,
	},

	"/trans.hsaco": {
		name:    "trans.hsaco",
		local:   "trans.hsaco",
		size:    9656,
		modtime: 1592168288,
		compressed: `
H4sIAAAAAAAC/+xaTXPbxBt/JCuO4+T/B0605YAIh7QdJCtynDi50Lw0SadJmjbQUphOZyOtbTV6G2kd
YgbSF2inM3SGl+FePgCHHjm1OfABmJ576IHO8AXgiBlJu7bkWn2BdgpUv5n4sZ6XfX7PWqvsrvbi0ZVF
nuOOAEUO7gMXfHk1umaGH0cjeTjUVaEAR2AEipAHACHm1yv3uKQsUD1H49Lw9khSMj5B3EDsulf+yiVl
PC7gCiLV90gXkpLF8U8Zx+o79YDowhPExfkFOPmA6Hl4egisP3noEo/JW0NJKcTiCjT/7OpC6M5+mzfC
+yHSCzDYqY3pZlcXltbfj3z3A8Aw1SNLr2u2hCw9+Gv4SJLqtZ2qUqbtykMAReorSVLxNPZ8w7FnRIaP
xPF3REU8VzyOPRub/kxRFCVxDVm46yOK4nsesn3X8XExuNpoWZuOGXMa69iPbOljoc8KsutNVO82c8LF
9vyKOJ+wdviEPFTxXGid9eohkQB9yByzix1eLRcn7GM100Hk8FjHY8P4JBld7ZhmTaNuz/Q1nUZmEx83
bJ2Zl0xnE5lzzVoNe0mvgALzWiyr3dZ13dtwkYZPNpE502mia9c0ZomwgGuoaZL0uk80yctZuNMkbpOc
MXTSSO8AwybptU+k1z6RXvtcK1Sll30sXvZfLGsZG/UG+RfX9YxutGVD17Ed3SsnajUfkw8eQXBy4vnn
P/uC83/4AvKvOfaj7ovqE47yjNULY7XaNImx5Bn6RsvWZr3632Y47+h43XPczr/kYKqAvPoGrlvYJhH5
qkKNS57TdKlp0djBemRn5nXP2EYEpzskG6flM6Jn0DaueQ5LKoqdYbDWtDaW1k/5na4qV7qW0wkLM6yi
nUUTkTOOtxWRDttUK5NFWZaL6fO/YM52IJd/aB7Mxf4O0OmmSK+PTg9/x8emily8wc7kCTJkyPAfBUfH
Pxeu7nI9D4E+/twP8PVQsNZLPozW42v3aIXeXZsKQr7dbrf/ifXzwO8Fa9LPIb8XPBtzueLePgjWp1/e
Hobvb1+EG3egDdcC9gUofDtSKFwWrsGlgUvcFY7P7wIv7AIs3+MB+AKACvDTzzzw4MKNOzxcvTsk8PB/
QVD5HK/m+OufwYVL10D84vYBuB7aYRAgxxX3wr4dENSbQn6Uh6/uXhF4CHIP8IVdQRBUYTBfBVgP83Bw
9S43ADDI53c5DtSbwI9CEAM85AHUXI6vBvkB3HvRw/3ynexOz5AhQ4YMGTJkyJAhQ4aXG+xd863hSFIB
+6hkK/l99D08W/Uzv9/+aDuBvE8VnXf6I/3zLc/Pi5qJ7Lq4Hb1lFccVWZEV8WBJRwSVLmB7y7B96WPH
2/JdpOGS5lhuk2DJczRL8rAplWWlhHcI9mxklhqaJhGHlExz25Jcz7mANVKKEkwoU5XJ8uTE1Pg0rpaR
qut6BW1iBdVqeEpRptSypuvVinpIPLiJfKyLji0G9MqyIo9PT0yXpakKRtMVVaItiYdgxbC3sDcjrqws
PA/ipqk/Oe3H7usEv+6nryX1g1T/S4/+9XAzZLB7ToHifyn7yiDbDsEg6y3bb1kg1+2m3EB+A+hnoCce
yATvkPAKWYYGsuZYFrYJyH7LImgTZL/hEy/6FkmYm1POj4efamwT+vzC2bXZ1WPzz3LfazC29512XqKz
hwUP9+NwLIyNHyaV2PjhYudC2Lh6BQB+b7cdFs/GD5NiD61CT/79tG2+d7yNJPPwPfyZfJOe4+B7xjeT
w33vpy7G4mdqIP0cTloDEo3NMUXK+ZiBnvpZmknapNKTxqXxq1z/9Ey+G++7GPbeiuRO7Dkn9Pn9luLc
Y6jSc1JnH9N/J1PivxlNdkda/J8BAAD//5VIJrK4JQAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
