// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inst.proto

/*
Package instpb is a generated protocol buffer package.

It is generated from these files:
	inst.proto

It has these top-level messages:
	Event
	Inst
*/
package instpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Stage int32

const (
	Stage_UNKNOWN    Stage = 0
	Stage_FetchStart Stage = 1
	Stage_FetchDone  Stage = 2
	Stage_Issue      Stage = 3
	Stage_ReadStart  Stage = 4
	Stage_ReadEnd    Stage = 5
	Stage_ExecStart  Stage = 6
	Stage_ExecEnd    Stage = 7
	Stage_WriteStart Stage = 8
	Stage_WriteEnd   Stage = 9
	Stage_Complete   Stage = 10
)

var Stage_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "FetchStart",
	2:  "FetchDone",
	3:  "Issue",
	4:  "ReadStart",
	5:  "ReadEnd",
	6:  "ExecStart",
	7:  "ExecEnd",
	8:  "WriteStart",
	9:  "WriteEnd",
	10: "Complete",
}
var Stage_value = map[string]int32{
	"UNKNOWN":    0,
	"FetchStart": 1,
	"FetchDone":  2,
	"Issue":      3,
	"ReadStart":  4,
	"ReadEnd":    5,
	"ExecStart":  6,
	"ExecEnd":    7,
	"WriteStart": 8,
	"WriteEnd":   9,
	"Complete":   10,
}

func (x Stage) String() string {
	return proto.EnumName(Stage_name, int32(x))
}
func (Stage) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Event struct {
	Time  float64 `protobuf:"fixed64,1,opt,name=time" json:"time,omitempty"`
	Stage Stage   `protobuf:"varint,2,opt,name=stage,enum=instpb.Stage" json:"stage,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetTime() float64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Event) GetStage() Stage {
	if m != nil {
		return m.Stage
	}
	return Stage_UNKNOWN
}

type Inst struct {
	Id          uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SimdId      uint32   `protobuf:"varint,2,opt,name=simd_id,json=simdId" json:"simd_id,omitempty"`
	WavefrontId uint32   `protobuf:"varint,3,opt,name=wavefront_id,json=wavefrontId" json:"wavefront_id,omitempty"`
	WorkgroupId uint32   `protobuf:"varint,4,opt,name=workgroup_id,json=workgroupId" json:"workgroup_id,omitempty"`
	Asm         string   `protobuf:"bytes,5,opt,name=asm" json:"asm,omitempty"`
	Events      []*Event `protobuf:"bytes,6,rep,name=events" json:"events,omitempty"`
}

func (m *Inst) Reset()                    { *m = Inst{} }
func (m *Inst) String() string            { return proto.CompactTextString(m) }
func (*Inst) ProtoMessage()               {}
func (*Inst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Inst) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Inst) GetSimdId() uint32 {
	if m != nil {
		return m.SimdId
	}
	return 0
}

func (m *Inst) GetWavefrontId() uint32 {
	if m != nil {
		return m.WavefrontId
	}
	return 0
}

func (m *Inst) GetWorkgroupId() uint32 {
	if m != nil {
		return m.WorkgroupId
	}
	return 0
}

func (m *Inst) GetAsm() string {
	if m != nil {
		return m.Asm
	}
	return ""
}

func (m *Inst) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "instpb.Event")
	proto.RegisterType((*Inst)(nil), "instpb.Inst")
	proto.RegisterEnum("instpb.Stage", Stage_name, Stage_value)
}

func init() { proto.RegisterFile("inst.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0xc7, 0xcd, 0x7e, 0xb5, 0x3b, 0xfd, 0x20, 0xcc, 0xc5, 0x3d, 0xae, 0x15, 0x61, 0xf1, 0xd0,
	0x83, 0xbe, 0x80, 0xa0, 0x15, 0x16, 0xa1, 0x42, 0x8a, 0xf4, 0x28, 0xdb, 0x26, 0xd6, 0xa0, 0xbb,
	0x59, 0x36, 0x69, 0xf5, 0x79, 0x7c, 0x00, 0x9f, 0x51, 0x26, 0x5b, 0xf5, 0x36, 0xbf, 0xf9, 0xfd,
	0x27, 0xc9, 0x10, 0x00, 0xdd, 0x58, 0x37, 0x6f, 0x3b, 0xe3, 0x0c, 0x26, 0x54, 0xb7, 0x9b, 0xd9,
	0x0d, 0xc4, 0x8b, 0x83, 0x6a, 0x1c, 0x22, 0x44, 0x4e, 0xd7, 0x2a, 0x63, 0x39, 0x2b, 0x98, 0xf0,
	0x35, 0x9e, 0x43, 0x6c, 0x5d, 0xb5, 0x53, 0x59, 0x90, 0xb3, 0x62, 0x7a, 0x35, 0x99, 0xf7, 0x43,
	0xf3, 0x15, 0x35, 0x45, 0xef, 0x66, 0xdf, 0x0c, 0xa2, 0xb2, 0xb1, 0x0e, 0xa7, 0x10, 0x68, 0xe9,
	0xe7, 0x23, 0x11, 0x68, 0x89, 0xa7, 0x30, 0xb0, 0xba, 0x96, 0xcf, 0x5a, 0xfa, 0xf9, 0x89, 0x48,
	0x08, 0x4b, 0x89, 0x67, 0x30, 0xfe, 0xa8, 0x0e, 0xea, 0xa5, 0x33, 0x8d, 0x23, 0x1b, 0x7a, 0x3b,
	0xfa, 0xeb, 0x1d, 0x23, 0xa6, 0x7b, 0xdb, 0x75, 0x66, 0xdf, 0x52, 0x24, 0x3a, 0x46, 0x7e, 0x7b,
	0xa5, 0x44, 0x0e, 0x61, 0x65, 0xeb, 0x2c, 0xce, 0x59, 0x91, 0x0a, 0x2a, 0xf1, 0x02, 0x12, 0x45,
	0xbb, 0xd8, 0x2c, 0xc9, 0xc3, 0x62, 0xf4, 0xff, 0x5e, 0xbf, 0xa1, 0x38, 0xca, 0xcb, 0x2f, 0x06,
	0xb1, 0xdf, 0x00, 0x47, 0x30, 0x78, 0x5a, 0x3e, 0x2c, 0x1f, 0xd7, 0x4b, 0x7e, 0x82, 0x53, 0x80,
	0x7b, 0xe5, 0xb6, 0xaf, 0x2b, 0x57, 0x75, 0x8e, 0x33, 0x9c, 0x40, 0xea, 0xf9, 0xce, 0x34, 0x8a,
	0x07, 0x98, 0x42, 0x5c, 0x5a, 0xbb, 0x57, 0x3c, 0x24, 0x23, 0x54, 0x25, 0xfb, 0x60, 0x44, 0xa7,
	0x10, 0x2e, 0x1a, 0xc9, 0x63, 0x72, 0x8b, 0x4f, 0xb5, 0xed, 0x5d, 0x42, 0x8e, 0x90, 0xdc, 0x80,
	0x6e, 0x58, 0x77, 0xda, 0xa9, 0x5e, 0x0e, 0x71, 0x0c, 0x43, 0xcf, 0x64, 0x53, 0xa2, 0x5b, 0x53,
	0xb7, 0xef, 0xca, 0x29, 0x0e, 0x9b, 0xc4, 0x7f, 0xd3, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x06, 0xe7, 0x48, 0xef, 0xb4, 0x01, 0x00, 0x00,
}
