// Code generated by "esc -private -o esc.go -pkg maxpooling ./kernels.hsaco"; DO NOT EDIT.

package maxpooling

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    13672,
		modtime: 1592039480,
		compressed: `
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
q+z/GwAA//+3rErWaDUAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
