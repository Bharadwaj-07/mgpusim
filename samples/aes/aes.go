package main

import (
	"flag"
	"log"
	"math/rand"

	"crypto/aes"

	"gitlab.com/yaotsu/core"
	"gitlab.com/yaotsu/gcn3"
	"gitlab.com/yaotsu/gcn3/driver"
	"gitlab.com/yaotsu/gcn3/insts"
	"gitlab.com/yaotsu/gcn3/kernels"
	"gitlab.com/yaotsu/gcn3/platform"
	"gitlab.com/yaotsu/mem"
)

type AESArgs struct {
	Input               driver.GPUPtr
	ExpandedKey         driver.GPUPtr
	S                   driver.GPUPtr
	HiddenGlobalOffsetX int64
	HiddenGlobalOffsetY int64
	HiddenGlobalOffsetZ int64
}

var (
	engine    core.Engine
	globalMem *mem.IdealMemController
	gpu       *gcn3.GPU
	gpuDriver *driver.Driver
	hsaco     *insts.HsaCo

	length       int
	input        []byte
	key          []byte
	expandedKey  []uint32
	s            []byte
	gInput       driver.GPUPtr
	gExpandedKey driver.GPUPtr
	gS           driver.GPUPtr
)

var kernelFilePath = flag.String(
	"kernel file path",
	"kernels.hsaco",
	"The path to the kernel hsaco file.",
)
var timing = flag.Bool("timing", false, "Run detailed timing simulation.")
var parallel = flag.Bool("parallel", false, "Run the simulation in parallel.")
var isaDebug = flag.Bool("debug-isa", false, "Generate the ISA debugging file.")
var instTracing = flag.Bool("trace-inst", false, "Generate instruction trace for visualization purposes.")
var verify = flag.Bool("verify", false, "Verify the emulation result.")
var lenInput = flag.Int("length", 65536, "The length of array to sort.")
var useStandardInputFlag = flag.Bool("standard-input", false, "Use the standard input for testing.")
var memTracing = flag.Bool("trace-mem", false, "Generate memory trace")

func main() {
	configure()
	initPlatform()
	loadProgram()
	initMem()
	run()

	if *verify {
		checkResult()
	}
}

func configure() {
	flag.Parse()

	if *parallel {
		platform.UseParallelEngine = true
	}

	if *isaDebug {
		platform.DebugISA = true
	}

	if *instTracing {
		platform.TraceInst = true
	}

	if *memTracing {
		platform.TraceMem = true
	}

	length = *lenInput
}

func initPlatform() {
	if *timing {
		engine, gpu, gpuDriver, globalMem = platform.BuildR9NanoPlatform()
	} else {
		engine, gpu, gpuDriver, globalMem = platform.BuildEmuPlatform()
	}
}

func loadProgram() {
	hsaco = kernels.LoadProgram(*kernelFilePath, "Encrypt")
	if hsaco == nil {
		log.Panic("Failed to load kernel binary")
	}
}

func initMem() {
	key = []byte{
		0, 1, 2, 3, 4, 5, 6, 7,
		8, 9, 10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31,
	}
	expandedKey = []uint32{
		0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f, 0x10111213, 0x14151617,
		0x18191a1b, 0x1c1d1e1f, 0xa573c29f, 0xa176c498, 0xa97fce93, 0xa572c09c,
		0x1651a8cd, 0x0244beda, 0x1a5da4c1, 0x0640bade, 0xae87dff0, 0x0ff11b68,
		0xa68ed5fb, 0x03fc1567, 0x6de1f148, 0x6fa54f92, 0x75f8eb53, 0x73b8518d,
		0xc656827f, 0xc9a79917, 0x6f294cec, 0x6cd5598b, 0x3de23a75, 0x524775e7,
		0x27bf9eb4, 0x5407cf39, 0x0bdc905f, 0xc27b0948, 0xad5245a4, 0xc1871c2f,
		0x45f5a660, 0x17b2d387, 0x300d4d33, 0x640a820a, 0x7ccff71c, 0xbeb4fe54,
		0x13e6bbf0, 0xd261a7df, 0xf01afafe, 0xe7a82979, 0xd7a5644a, 0xb3afe640,
		0x2541fe71, 0x9bf50025, 0x8813bbd5, 0x5a721c0a, 0x4e5a6699, 0xa9f24fe0,
		0x7e572baa, 0xcdf8cdea, 0x24fc79cc, 0xbf0979e9, 0x371ac23c, 0x6d68de36,
	}

	s = []uint8{
		0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
		0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
		0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
		0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
		0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
		0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
		0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
		0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
		0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
		0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
		0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
		0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
		0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
	}

	gInput = gpuDriver.AllocateMemory(globalMem.Storage, uint64(length))
	gExpandedKey = gpuDriver.AllocateMemory(globalMem.Storage, uint64(len(expandedKey)*4))
	gS = gpuDriver.AllocateMemory(globalMem.Storage, uint64(len(s)))

	if *useStandardInputFlag {
		useStandardInput()
	} else {
		input = make([]byte, length)
		for i := 0; i < length; i++ {
			input[i] = byte(rand.Uint32())
		}
	}

	gpuDriver.MemoryCopyHostToDevice(gInput, input, gpu.ToDriver)
	gpuDriver.MemoryCopyHostToDevice(gExpandedKey, expandedKey, gpu.ToDriver)
	gpuDriver.MemoryCopyHostToDevice(gS, s, gpu.ToDriver)
}

func run() {
	kernArg := AESArgs{
		gInput,
		gExpandedKey,
		gS,
		0, 0, 0}
	gpuDriver.LaunchKernel(hsaco, gpu.ToDriver, globalMem.Storage,
		[3]uint32{uint32(length / 16), 1, 1},
		[3]uint16{64, 1, 1},
		&kernArg)
}

func checkResult() {
	gpuOutput := make([]byte, length)
	gpuDriver.MemoryCopyDeviceToHost(gpuOutput, gInput, gpu.ToDriver)

	cpuOutput := cpuEncrypt()

	for i := 0; i < length; i++ {
		if cpuOutput[i] != gpuOutput[i] {
			log.Panicf("Mismatch at position %d: should be %02x but get %02x",
				i, cpuOutput[i], gpuOutput[i])
		}
	}

	log.Printf("\nPassed!\n")
}

func cpuEncrypt() []byte {
	cpuOutput := make([]byte, length)
	cipherBlock, err := aes.NewCipher(key)
	if err != nil {
		panic(err)
	}
	for i := 0; i < length/16; i++ {
		cipherBlock.Encrypt(cpuOutput[i*16:], input[i*16:])
	}
	return cpuOutput
}

func useStandardInput() {
	input = []uint8{
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
	}
	length = len(input)
}
