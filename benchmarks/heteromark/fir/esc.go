// Code generated by "esc -private -o esc.go -pkg fir ./kernels.hsaco"; DO NOT EDIT.

package fir

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/kernels.hsaco": {
		name:    "kernels.hsaco",
		local:   "./kernels.hsaco",
		size:    9352,
		modtime: 1592039480,
		compressed: `
H4sIAAAAAAAC/+xaXW/bVBh+fZy6wcvabEMIBgIjIRVNi5W6pYp6Q79IGy3t+sG6FZiKG5+kVv0ROXbV
TJClhSEuikBc7UfwG5Yg8Qu43gUXjH8AlwTZPiexvZp20lCR6kdKHvt9z/tlv5Z8fM7Dj8pFxDAzQMDC
b8C4B1n/nCq+fdfnG56sAGmYgQzwwAFAKjAuyl0mzGkiZ4hdHL7LhJnm49oNBc6j/DsT5qCdmysIRB7h
OoSZ2qEXtKP1rT+zldQZ7IL5uVh7ZiscvDhS9HoiGCQe4CU+zKmAXZrEn11e8IbTe/Om1w++PAXD/dqo
bHZ5YXH1jj/WbY9LRC7rSq1i5GRdcX+7DdmlmvqgouVq1YNCfoL4774CwBObXC7Hb2KroZrGtEDxqTB+
U8gL9/lb2DKw1hhoeEHICSuyjgciQRCKpXXe5Y2mvmNqAfVYsbQ+s6eMedqybNQcuTYwvV3HxnxZmA9p
+8l4SUjCfU87a9UaoZC8TyckYzp23bF5evpxs45DY8aqminbN8b6IzbUB2EPhb5qVlNrxvSJqk1Zc/At
1VCoelEzd2RtzqlWsRUe5aZARxUnpIF3RbE26nIFrzmyNt13MdBXKlTjYwFXZUez42uvmLhavZilq8aF
veu7asM2rebFLN5w9G1brscX76iGHV/4ZHzhk/GFzzU9UXzNd4I1n1bTS7obS6qiYMO/oLer1Qa278Un
WJqa/O/jb51z/E/OIf6KafxLX5QKZ3wUkqzOmtW8qeBVy6z33w+IlfvuIlu1DVzTsWH7eReoy0XLdOpE
VVQPsOLr80S9aqn7so3jB4Sdk8qp87vyPq5aJg0qCP1eW3H0jcXV9cGrjCQNNJshzfg40SzLB0VNtu+a
1p6ftedU+mCKF0WRj3svZQK/6zG6BAkSnA8YMkVkvNkde+oDeQQ/wQ/eXC/8yN8LHL/mzQQDc9NUiuv1
er3/Y/1zgLruXJRlR7r+3BZ13Sn6V8B13weANkKth3DcYXrMN24FaSb9YxpAQgBSGw6fQJvrtFGq9TY8
6rRRujXCHD0Blm+5MgYefwmIa7U5Dq6gTOsaGmllUbZ1FV1tcaOvQvpaFthLnMTB978ecQh+5nkpfTkj
8aMjBYDVpxwAyzDIy4s5ZA7R16jNttkjYIY7dTjupLjUzT96jzrg2gOCy4hrZQAklkUFgPpTf+5/2Em6
PEGCBAkSJEiQIEGCBAkS0LXmJbLOTmfurxMeInxM9Hzgu4GLP//umS5/TvR0XfmLzMnxyqqxh61poVxe
ECbFPFQ02agJ+/5iq1AQ88Lp3yvcrD+7EpYPE/kvEfllN2fEPbc/wBuGhgfr8hSiYdoYRKVpNJo6iDXD
EXflxi6Qf1duWyDa+MD2zmRdrYBYMXUdGzaIjaZuyzsgNnYbtuUf+Qxzc/ltyfufgGJpHbYXtlZml0vz
L+87znBg2T9u/b//TQaev36XAma0HygH+4EJ7HOg8lEA+KvXM6k97QfKb0XSSkfiv0F8o0j/UM5G7FMR
fofsS0CRfqXMnNhHA4wF94hA/L6SOAc5YstSQcx+j6FI/TTMFHGZj4SpE/v3YsJT/jB47wN4TOwPYPB8
D51w/xaDuQeQJft+tk65fmsx9iqxv36K/T8BAAD//0p6e1+IJAAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
