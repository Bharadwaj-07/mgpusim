; ModuleID = 'kernels.cl'
source_filename = "kernels.cl"
target datalayout = "e-p:64:64-p1:64:64-p2:64:64-p3:32:32-p4:32:32-p5:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-A5"
target triple = "amdgcn-amd-amdhsa-amdgizcl"

; Function Attrs: convergent nounwind
define amdgpu_kernel void @microbench(double addrspace(1)* nocapture readonly, double addrspace(1)* nocapture readonly, double addrspace(1)* nocapture) local_unnamed_addr #0 !kernel_arg_addr_space !3 !kernel_arg_access_qual !4 !kernel_arg_type !5 !kernel_arg_base_type !5 !kernel_arg_type_qual !6 !kernel_arg_name !7 {
  %4 = tail call i64 @_Z13get_global_idj(i32 0) #2
  %5 = and i64 %4, 4294967295
  %6 = getelementptr inbounds double, double addrspace(1)* %0, i64 %5
  %7 = getelementptr inbounds double, double addrspace(1)* %1, i64 %5
  %8 = getelementptr inbounds double, double addrspace(1)* %2, i64 %5
  br label %10

; <label>:9:                                      ; preds = %10
  ret void

; <label>:10:                                     ; preds = %10, %3
  %11 = phi i32 [ 0, %3 ], [ %87, %10 ]
  %12 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %13 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %14 = fmul double %12, %13
  store double %14, double addrspace(1)* %8, align 8, !tbaa !8
  %15 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %16 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %17 = fmul double %15, %16
  store double %17, double addrspace(1)* %8, align 8, !tbaa !8
  %18 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %19 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %20 = fmul double %18, %19
  store double %20, double addrspace(1)* %8, align 8, !tbaa !8
  %21 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %22 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %23 = fmul double %21, %22
  store double %23, double addrspace(1)* %8, align 8, !tbaa !8
  %24 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %25 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %26 = fmul double %24, %25
  store double %26, double addrspace(1)* %8, align 8, !tbaa !8
  %27 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %28 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %29 = fmul double %27, %28
  store double %29, double addrspace(1)* %8, align 8, !tbaa !8
  %30 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %31 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %32 = fmul double %30, %31
  store double %32, double addrspace(1)* %8, align 8, !tbaa !8
  %33 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %34 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %35 = fmul double %33, %34
  store double %35, double addrspace(1)* %8, align 8, !tbaa !8
  %36 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %37 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %38 = fmul double %36, %37
  store double %38, double addrspace(1)* %8, align 8, !tbaa !8
  %39 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %40 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %41 = fmul double %39, %40
  store double %41, double addrspace(1)* %8, align 8, !tbaa !8
  %42 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %43 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %44 = fmul double %42, %43
  store double %44, double addrspace(1)* %8, align 8, !tbaa !8
  %45 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %46 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %47 = fmul double %45, %46
  store double %47, double addrspace(1)* %8, align 8, !tbaa !8
  %48 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %49 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %50 = fmul double %48, %49
  store double %50, double addrspace(1)* %8, align 8, !tbaa !8
  %51 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %52 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %53 = fmul double %51, %52
  store double %53, double addrspace(1)* %8, align 8, !tbaa !8
  %54 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %55 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %56 = fmul double %54, %55
  store double %56, double addrspace(1)* %8, align 8, !tbaa !8
  %57 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %58 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %59 = fmul double %57, %58
  store double %59, double addrspace(1)* %8, align 8, !tbaa !8
  %60 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %61 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %62 = fmul double %60, %61
  store double %62, double addrspace(1)* %8, align 8, !tbaa !8
  %63 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %64 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %65 = fmul double %63, %64
  store double %65, double addrspace(1)* %8, align 8, !tbaa !8
  %66 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %67 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %68 = fmul double %66, %67
  store double %68, double addrspace(1)* %8, align 8, !tbaa !8
  %69 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %70 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %71 = fmul double %69, %70
  store double %71, double addrspace(1)* %8, align 8, !tbaa !8
  %72 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %73 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %74 = fmul double %72, %73
  store double %74, double addrspace(1)* %8, align 8, !tbaa !8
  %75 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %76 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %77 = fmul double %75, %76
  store double %77, double addrspace(1)* %8, align 8, !tbaa !8
  %78 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %79 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %80 = fmul double %78, %79
  store double %80, double addrspace(1)* %8, align 8, !tbaa !8
  %81 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %82 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %83 = fmul double %81, %82
  store double %83, double addrspace(1)* %8, align 8, !tbaa !8
  %84 = load double, double addrspace(1)* %6, align 8, !tbaa !8
  %85 = load double, double addrspace(1)* %7, align 8, !tbaa !8
  %86 = fmul double %84, %85
  store double %86, double addrspace(1)* %8, align 8, !tbaa !8
  %87 = add nuw nsw i32 %11, 25
  %88 = icmp eq i32 %87, 10000
  br i1 %88, label %9, label %10
}

; Function Attrs: convergent nounwind readnone
declare i64 @_Z13get_global_idj(i32) local_unnamed_addr #1

attributes #0 = { convergent nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+dpp,+fp64-fp16-denormals,+s-memrealtime,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="gfx803" "target-features"="+16-bit-insts,+dpp,+fp64-fp16-denormals,+s-memrealtime,-fp32-denormals" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { convergent nounwind readnone }

!llvm.module.flags = !{!0}
!opencl.ocl.version = !{!1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, i32 2}
!2 = !{!"clang version 4.0 "}
!3 = !{i32 1, i32 1, i32 1}
!4 = !{!"none", !"none", !"none"}
!5 = !{!"double*", !"double*", !"double*"}
!6 = !{!"", !"", !""}
!7 = !{!"v1", !"v2", !"output"}
!8 = !{!9, !9, i64 0}
!9 = !{!"double", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
